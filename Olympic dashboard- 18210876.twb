<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20201.20.0326.1623                               -->
<workbook original-version='18.1' source-build='2020.1.2 (20201.20.0326.1623)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <style>
    <_.fcp.MarkAnimation.true...style-rule element='animation'>
      <format attr='animation-on' value='ao-off' />
    </_.fcp.MarkAnimation.true...style-rule>
  </style>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='Top Teams' datatype='integer' name='[Age Parameter]' param-domain-type='range' role='measure' type='quantitative' value='15'>
        <calculation class='tableau' formula='15' />
        <range max='15' min='1' />
      </column>
    </datasource>
    <datasource caption='athlete_events-csv+ (Multiple Connections)' inline='true' name='federated.1ac8rjf1w901u31exdi441g56pyo' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='athlete_events' name='excel-direct.1in3dob0w7vfc4175i5ne14fh61o'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='H:/DCU Study/DM and DV/Assignment/Clean data/athlete_events.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
          <named-connection caption='noc_regions' name='excel-direct.0rcnort16ht0wk17d3o8109mb0nm'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='H:/DCU Study/DM and DV/Assignment/Clean data/noc_regions.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation join='left' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[athlete_events-csv].[NOC]' />
              <expression op='[noc_regions].[NOC]' />
            </expression>
          </clause>
          <relation connection='excel-direct.1in3dob0w7vfc4175i5ne14fh61o' name='athlete_events-csv' table='[&apos;athlete_events-csv$&apos;]' type='table'>
            <columns gridOrigin='A1:O10001:no:A1:O2147483647:0' header='yes' outcome='2'>
              <column datatype='string' name='Name' ordinal='0' />
              <column datatype='string' name='Sex' ordinal='1' />
              <column datatype='integer' name='Age' ordinal='2' />
              <column datatype='string' name='Height' ordinal='3' />
              <column datatype='string' name='Weight' ordinal='4' />
              <column datatype='string' name='Team' ordinal='5' />
              <column datatype='string' name='NOC' ordinal='6' />
              <column datatype='string' name='Games' ordinal='7' />
              <column datatype='date' date-parse-format='yyyy' name='Year' ordinal='8' />
              <column datatype='string' name='Season' ordinal='9' />
              <column datatype='string' name='City' ordinal='10' />
              <column datatype='string' name='Country' ordinal='11' />
              <column datatype='string' name='Sport' ordinal='12' />
              <column datatype='string' name='Event' ordinal='13' />
              <column datatype='string' name='Medal' ordinal='14' />
            </columns>
          </relation>
          <relation connection='excel-direct.0rcnort16ht0wk17d3o8109mb0nm' name='noc_regions' table='[noc_regions$]' type='table'>
            <columns gridOrigin='A1:B231:no:A1:B231:0' header='yes' outcome='2'>
              <column datatype='string' name='NOC' ordinal='0' />
              <column datatype='string' name='region' ordinal='1' />
            </columns>
          </relation>
        </relation>
        <cols>
          <map key='[Age]' value='[athlete_events-csv].[Age]' />
          <map key='[City]' value='[athlete_events-csv].[City]' />
          <map key='[Country]' value='[athlete_events-csv].[Country]' />
          <map key='[Event]' value='[athlete_events-csv].[Event]' />
          <map key='[Games]' value='[athlete_events-csv].[Games]' />
          <map key='[Height]' value='[athlete_events-csv].[Height]' />
          <map key='[Medal]' value='[athlete_events-csv].[Medal]' />
          <map key='[NOC (noc!regions)]' value='[noc_regions].[NOC]' />
          <map key='[NOC]' value='[athlete_events-csv].[NOC]' />
          <map key='[Name]' value='[athlete_events-csv].[Name]' />
          <map key='[Season]' value='[athlete_events-csv].[Season]' />
          <map key='[Sex]' value='[athlete_events-csv].[Sex]' />
          <map key='[Sport]' value='[athlete_events-csv].[Sport]' />
          <map key='[Team]' value='[athlete_events-csv].[Team]' />
          <map key='[Weight]' value='[athlete_events-csv].[Weight]' />
          <map key='[Year]' value='[athlete_events-csv].[Year]' />
          <map key='[region]' value='[noc_regions].[region]' />
        </cols>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>1</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:O10001:no:A1:O2147483647:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Name]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Name</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sex</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Sex]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Sex</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Age</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Age]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Age</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Height</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Height]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Height</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Weight</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Weight]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Weight</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Team</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Team]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Team</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NOC</remote-name>
            <remote-type>130</remote-type>
            <local-name>[NOC]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>NOC</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Games</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Games]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Games</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>8</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Season</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Season]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Season</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sport</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Sport]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Sport</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Event</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Event]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Event</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Medal</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Medal]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Medal</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NOC</remote-name>
            <remote-type>130</remote-type>
            <local-name>[NOC (noc!regions)]</local-name>
            <parent-name>[noc_regions]</parent-name>
            <remote-alias>NOC</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[region]</local-name>
            <parent-name>[noc_regions]</parent-name>
            <remote-alias>region</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[noc_regions]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:B231:no:A1:B231:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <semantic-values semantic-role='[City].[Name]'>
          <semantic-value key='&quot;Athina&quot;' value='&quot;Athens&quot;' />
          <semantic-value key='&quot;Torino&quot;' value='&quot;Turin&quot;' />
        </semantic-values>
        <semantic-values semantic-role='[Geographical].[Latitude]'>
          <semantic-value key='&quot;Atlanta&quot;' value='33.753746' />
          <semantic-value key='&quot;Chamonix&quot;' value='45.923699999999997' />
          <semantic-value key='&quot;Cortina d&apos;Ampezzo&quot;' value='46.540500000000002' />
          <semantic-value key='&quot;Lake Placid&quot;' value='27.293099999999999' />
          <semantic-value key='&quot;Moskva&quot;' value='55.755800000000001' />
          <semantic-value key='&quot;Sankt Moritz&quot;' value='46.4908' />
          <semantic-value key='&quot;Sarajevo&quot;' value='43.856299999999997' />
          <semantic-value key='&quot;St. Louis&quot;' value='38.627003000000002' />
        </semantic-values>
        <semantic-values semantic-role='[Geographical].[Longitude]'>
          <semantic-value key='&quot;Atlanta&quot;' value='-84.386330000000001' />
          <semantic-value key='&quot;Chamonix&quot;' value='6.8693999999999997' />
          <semantic-value key='&quot;Cortina d&apos;Ampezzo&quot;' value='12.1357' />
          <semantic-value key='&quot;Lake Placid&quot;' value='-81.362846000000005' />
          <semantic-value key='&quot;Moskva&quot;' value='37.6173' />
          <semantic-value key='&quot;Sankt Moritz&quot;' value='9.8354999999999997' />
          <semantic-value key='&quot;Sarajevo&quot;' value='18.4131' />
          <semantic-value key='&quot;St. Louis&quot;' value='-90.199402000000006' />
        </semantic-values>
      </column>
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <semantic-values semantic-role='[Country].[Name]'>
          <semantic-value key='&quot;Yugoslavia&quot;' value='&quot;Serbia&quot;' />
        </semantic-values>
      </column>
      <column aggregation='CountD' datatype='string' name='[Event]' role='dimension' type='nominal' />
      <column aggregation='CountD' datatype='string' name='[Medal]' role='dimension' type='nominal' />
      <column aggregation='CountD' datatype='string' default-role='measure' default-type='quantitative' name='[Name]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[Season]' role='dimension' type='nominal' />
      <column aggregation='CountD' datatype='string' name='[Sex]' role='dimension' type='nominal' />
      <column datatype='string' name='[Sport]' role='dimension' type='nominal' />
      <column aggregation='CountD' datatype='string' name='[Team]' role='dimension' type='nominal' />
      <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
      <column aggregation='CountD' caption='Region' datatype='string' name='[region]' role='dimension' type='nominal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[Medal]' derivation='None' name='[none:Medal:nk]' pivot='key' type='nominal' />
      <column-instance column='[Season]' derivation='None' name='[none:Season:nk]' pivot='key' type='nominal' />
      <column-instance column='[Sex]' derivation='None' name='[none:Sex:nk]' pivot='key' type='nominal' />
      <column-instance column='[Sport]' derivation='None' name='[none:Sport:nk]' pivot='key' type='nominal' />
      <column-instance column='[region]' derivation='None' name='[none:region:nk]' pivot='key' type='nominal' />
      <column-instance column='[Year]' derivation='Year-Trunc' name='[tyr:Year:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Year]' derivation='Year' name='[yr:Year:ok]' pivot='key' type='ordinal' />
      <group caption='Action (City,Country,Season,YEAR(Year))' hidden='true' name='[Action (City,Country,Season,YEAR(Year))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[City]' />
          <groupfilter function='level-members' level='[Country]' />
          <groupfilter function='level-members' level='[Season]' />
          <groupfilter function='level-members' level='[yr:Year:ok]' />
        </groupfilter>
      </group>
      <group caption='Action (Medal,Region)' hidden='true' name='[Action (Medal,Region)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Medal]' />
          <groupfilter function='level-members' level='[region]' />
        </groupfilter>
      </group>
      <group caption='Action (Season,YEAR(Year))' hidden='true' name='[Action (Season,YEAR(Year))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Season]' />
          <groupfilter function='level-members' level='[tyr:Year:ok]' />
        </groupfilter>
      </group>
      <group caption='Action (Sex,Sport)' hidden='true' name='[Action (Sex,Sport)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Sex]' />
          <groupfilter function='level-members' level='[Sport]' />
        </groupfilter>
      </group>
      <group name='[Set 1]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='crossjoin'>
          <groupfilter function='union'>
            <groupfilter function='member' level='[Medal]' member='&quot;Bronze&quot;' />
            <groupfilter function='member' level='[Medal]' member='&quot;Gold&quot;' />
            <groupfilter function='member' level='[Medal]' member='&quot;Silver&quot;' />
          </groupfilter>
          <groupfilter function='union'>
            <groupfilter function='member' level='[region]' member='&quot;France&quot;' />
            <groupfilter function='member' level='[region]' member='&quot;Germany&quot;' />
            <groupfilter function='member' level='[region]' member='&quot;Italy&quot;' />
            <groupfilter function='member' level='[region]' member='&quot;Russia&quot;' />
            <groupfilter function='member' level='[region]' member='&quot;UK&quot;' />
            <groupfilter function='member' level='[region]' member='&quot;USA&quot;' />
          </groupfilter>
        </groupfilter>
      </group>
      <drill-paths>
        <drill-path name='Country, City'>
          <field>[Country]</field>
          <field>[City]</field>
        </drill-path>
      </drill-paths>
      <layout dim-ordering='alphabetic' dim-percentage='0.680723' group-percentage='0.0421687' measure-ordering='alphabetic' measure-percentage='0.23494' parameter-percentage='0.0421687' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:region:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;USA&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>%null%</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Macedonia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Trinidad&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Virgin Islands, US&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Individual Olympic Athletes&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;North Korea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;UK&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Sex:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;F&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;M&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Season:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Winter&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Summer&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Sport:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Basketball&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Handball&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Short Track Speed Skating&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Aeronautics&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Diving&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Racquets&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Triathlon&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Art Competitions&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Football&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Rugby&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Weightlifting&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bobsleigh&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Judo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Softball&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Basque Pelota&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Hockey&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Skeleton&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Athletics&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Freestyle Skiing&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Rugby Sevens&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Wrestling&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Curling&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Nordic Combined&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tennis&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Alpine Skiing&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Equestrianism&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Rhythmic Gymnastics&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tug-Of-War&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Croquet&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Modern Pentathlon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Table Tennis&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Badminton&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Golf&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sailing&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Boxing&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lacrosse&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Speed Skating&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Canoeing&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Luge&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Swimming&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cross Country Skiing&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Motorboating&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Taekwondo&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cycling&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Polo&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Trampolining&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Beach Volleyball&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ice Hockey&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ski Jumping&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Baseball&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Gymnastics&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Shooting&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Alpinism&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Fencing&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Roque&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Volleyball&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cricket&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Military Ski Patrol&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Synchronized Swimming&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Biathlon&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jeu De Paume&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Snowboarding&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>%all%</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Archery&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Figure Skating&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Rowing&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Water Polo&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Medal:nk]' type='palette'>
            <map to='#9c755f'>
              <bucket>&quot;NA&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Silver&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bronze&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Gold&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <shared-views>
    <shared-view name='federated.1ac8rjf1w901u31exdi441g56pyo'>
      <datasources>
        <datasource caption='athlete_events-csv+ (Multiple Connections)' name='federated.1ac8rjf1w901u31exdi441g56pyo' />
      </datasources>
      <datasource-dependencies datasource='federated.1ac8rjf1w901u31exdi441g56pyo'>
        <column aggregation='CountD' datatype='string' name='[Medal]' role='dimension' type='nominal' />
        <column datatype='string' name='[Season]' role='dimension' type='nominal' />
        <column aggregation='CountD' datatype='string' name='[Sex]' role='dimension' type='nominal' />
        <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
        <column-instance column='[Medal]' derivation='None' name='[none:Medal:nk]' pivot='key' type='nominal' />
        <column-instance column='[Season]' derivation='None' name='[none:Season:nk]' pivot='key' type='nominal' />
        <column-instance column='[Sex]' derivation='None' name='[none:Sex:nk]' pivot='key' type='nominal' />
        <column-instance column='[Year]' derivation='Year' name='[yr:Year:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]'>
        <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
          <groupfilter function='member' level='[none:Medal:nk]' member='&quot;Bronze&quot;' />
          <groupfilter function='member' level='[none:Medal:nk]' member='&quot;Gold&quot;' />
          <groupfilter function='member' level='[none:Medal:nk]' member='&quot;Silver&quot;' />
        </groupfilter>
      </filter>
      <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]'>
        <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
          <groupfilter function='member' level='[none:Season:nk]' member='&quot;Summer&quot;' />
          <groupfilter function='member' level='[none:Season:nk]' member='&quot;Winter&quot;' />
        </groupfilter>
      </filter>
      <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]'>
        <groupfilter function='level-members' level='[none:Sex:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]'>
        <groupfilter function='level-members' level='[yr:Year:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
  </shared-views>
  <actions>
    <action caption='Highlight 1 (generated)' name='[Action1]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Sport with most medals' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Sport' />
        <param name='target' value='Sport with most medals' />
      </command>
    </action>
    <action caption='Filter 1 (generated)' name='[Action2]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Olympic Dashboard' type='sheet' worksheet='Olympic hosted cities' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Olympic Dashboard' />
      </command>
    </action>
    <action caption='Filter 2 (generated)' name='[Action3]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Olympic Dashboard' type='sheet' worksheet='Event count vs years' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Olympic Dashboard' />
      </command>
    </action>
    <action caption='Filter 3 (generated)' name='[Action4]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Olympic Dashboard' type='sheet' worksheet='Sport with most medals' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Olympic Dashboard' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Event count vs years'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Event count vs Years</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='athlete_events-csv+ (Multiple Connections)' name='federated.1ac8rjf1w901u31exdi441g56pyo' />
          </datasources>
          <datasource-dependencies datasource='federated.1ac8rjf1w901u31exdi441g56pyo'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <semantic-values semantic-role='[City].[Name]'>
                <semantic-value key='&quot;Athina&quot;' value='&quot;Athens&quot;' />
                <semantic-value key='&quot;Torino&quot;' value='&quot;Turin&quot;' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;Atlanta&quot;' value='33.753746' />
                <semantic-value key='&quot;Chamonix&quot;' value='45.923699999999997' />
                <semantic-value key='&quot;Cortina d&apos;Ampezzo&quot;' value='46.540500000000002' />
                <semantic-value key='&quot;Lake Placid&quot;' value='27.293099999999999' />
                <semantic-value key='&quot;Moskva&quot;' value='55.755800000000001' />
                <semantic-value key='&quot;Sankt Moritz&quot;' value='46.4908' />
                <semantic-value key='&quot;Sarajevo&quot;' value='43.856299999999997' />
                <semantic-value key='&quot;St. Louis&quot;' value='38.627003000000002' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;Atlanta&quot;' value='-84.386330000000001' />
                <semantic-value key='&quot;Chamonix&quot;' value='6.8693999999999997' />
                <semantic-value key='&quot;Cortina d&apos;Ampezzo&quot;' value='12.1357' />
                <semantic-value key='&quot;Lake Placid&quot;' value='-81.362846000000005' />
                <semantic-value key='&quot;Moskva&quot;' value='37.6173' />
                <semantic-value key='&quot;Sankt Moritz&quot;' value='9.8354999999999997' />
                <semantic-value key='&quot;Sarajevo&quot;' value='18.4131' />
                <semantic-value key='&quot;St. Louis&quot;' value='-90.199402000000006' />
              </semantic-values>
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Yugoslavia&quot;' value='&quot;Serbia&quot;' />
              </semantic-values>
            </column>
            <column aggregation='CountD' datatype='string' name='[Event]' role='dimension' type='nominal' />
            <column aggregation='CountD' datatype='string' name='[Medal]' role='dimension' type='nominal' />
            <column datatype='string' name='[Season]' role='dimension' type='nominal' />
            <column aggregation='CountD' datatype='string' name='[Sex]' role='dimension' type='nominal' />
            <column datatype='string' name='[Sport]' role='dimension' type='nominal' />
            <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Event]' derivation='CountD' name='[ctd:Event:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Medal]' derivation='None' name='[none:Medal:nk]' pivot='key' type='nominal' />
            <column-instance column='[Season]' derivation='None' name='[none:Season:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sex]' derivation='None' name='[none:Sex:nk]' pivot='key' type='nominal' />
            <column aggregation='CountD' caption='Region' datatype='string' name='[region]' role='dimension' type='nominal' />
            <column-instance column='[Year]' derivation='Year-Trunc' name='[tyr:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Year]' derivation='Year' name='[yr:Year:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (City,Country,Season,YEAR(Year))]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[City]' />
              <groupfilter function='level-members' level='[Country]' />
              <groupfilter function='level-members' level='[Season]' />
              <groupfilter function='level-members' level='[yr:Year:ok]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Medal,Region)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Medal]' />
              <groupfilter function='level-members' level='[region]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Sex,Sport)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action4]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Sex]' />
              <groupfilter function='level-members' level='[Sport]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Medal,Region)]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (City,Country,Season,YEAR(Year))]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Sex,Sport)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1ac8rjf1w901u31exdi441g56pyo].[ctd:Event:qk]' scope='rows' value='Sports events' />
            <format attr='title' class='0' field='[federated.1ac8rjf1w901u31exdi441g56pyo].[tyr:Year:qk]' scope='cols' value='Years' />
          </style-rule>
          <style-rule element='refband'>
            <format attr='reverse-palette' id='refline0' value='false' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]' value='Season'>
              <formatted-text>
                <run fontalignment='1'>Season</run>
              </formatted-text>
            </format>
            <format attr='title' field='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]' value='Medal'>
              <formatted-text>
                <run fontalignment='1'>Medal</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Season:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Year:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[tyr:Year:qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Number of Events:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[ctd:Event:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='line-interpolation' value='step' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='size' value='1.1974033117294312' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ac8rjf1w901u31exdi441g56pyo].[ctd:Event:qk]</rows>
        <cols>[federated.1ac8rjf1w901u31exdi441g56pyo].[tyr:Year:qk]</cols>
        <annotations>
          <annotation class='point' id='0' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true'>No matches due to WWII</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord axis-value='#1939-07-11 22:09:38.457#'>
                  <node-reference>
                    <axis>[federated.1ac8rjf1w901u31exdi441g56pyo].[tyr:Year:qk]</axis>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='141.62307692307692'>
                  <node-reference>
                    <axis>[federated.1ac8rjf1w901u31exdi441g56pyo].[ctd:Event:qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='120' y='-96' />
          </annotation>
        </annotations>
      </table>
      <simple-id uuid='{9C90E9EC-EDBE-4809-AF77-118C86771854}' />
    </worksheet>
    <worksheet name='Olympic hosted cities'>
      <table>
        <view>
          <datasources>
            <datasource caption='athlete_events-csv+ (Multiple Connections)' name='federated.1ac8rjf1w901u31exdi441g56pyo' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ac8rjf1w901u31exdi441g56pyo'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <semantic-values semantic-role='[City].[Name]'>
                <semantic-value key='&quot;Athina&quot;' value='&quot;Athens&quot;' />
                <semantic-value key='&quot;Torino&quot;' value='&quot;Turin&quot;' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;Atlanta&quot;' value='33.753746' />
                <semantic-value key='&quot;Chamonix&quot;' value='45.923699999999997' />
                <semantic-value key='&quot;Cortina d&apos;Ampezzo&quot;' value='46.540500000000002' />
                <semantic-value key='&quot;Lake Placid&quot;' value='27.293099999999999' />
                <semantic-value key='&quot;Moskva&quot;' value='55.755800000000001' />
                <semantic-value key='&quot;Sankt Moritz&quot;' value='46.4908' />
                <semantic-value key='&quot;Sarajevo&quot;' value='43.856299999999997' />
                <semantic-value key='&quot;St. Louis&quot;' value='38.627003000000002' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;Atlanta&quot;' value='-84.386330000000001' />
                <semantic-value key='&quot;Chamonix&quot;' value='6.8693999999999997' />
                <semantic-value key='&quot;Cortina d&apos;Ampezzo&quot;' value='12.1357' />
                <semantic-value key='&quot;Lake Placid&quot;' value='-81.362846000000005' />
                <semantic-value key='&quot;Moskva&quot;' value='37.6173' />
                <semantic-value key='&quot;Sankt Moritz&quot;' value='9.8354999999999997' />
                <semantic-value key='&quot;Sarajevo&quot;' value='18.4131' />
                <semantic-value key='&quot;St. Louis&quot;' value='-90.199402000000006' />
              </semantic-values>
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Yugoslavia&quot;' value='&quot;Serbia&quot;' />
              </semantic-values>
            </column>
            <column aggregation='CountD' datatype='string' name='[Medal]' role='dimension' type='nominal' />
            <column datatype='string' name='[Season]' role='dimension' type='nominal' />
            <column aggregation='CountD' datatype='string' name='[Sex]' role='dimension' type='nominal' />
            <column datatype='string' name='[Sport]' role='dimension' type='nominal' />
            <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Medal]' derivation='None' name='[none:Medal:nk]' pivot='key' type='nominal' />
            <column-instance column='[Season]' derivation='None' name='[none:Season:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sex]' derivation='None' name='[none:Sex:nk]' pivot='key' type='nominal' />
            <column aggregation='CountD' caption='Region' datatype='string' name='[region]' role='dimension' type='nominal' />
            <column-instance column='[Year]' derivation='Year-Trunc' name='[tyr:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Year]' derivation='Year' name='[yr:Year:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Medal,Region)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Medal]' />
              <groupfilter function='level-members' level='[region]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Season,YEAR(Year))]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action3]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Season]' />
              <groupfilter function='level-members' level='[tyr:Year:ok]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Sex,Sport)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action4]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Sex]' />
              <groupfilter function='level-members' level='[Sport]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Medal,Region)]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Sex,Sport)]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Season,YEAR(Year))]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ac8rjf1w901u31exdi441g56pyo].[Longitude (generated)]' field-type='quantitative' max='21874812.323961247' min='-18688938.173520803' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ac8rjf1w901u31exdi441g56pyo].[Latitude (generated)]' field-type='quantitative' max='11997087.698101191' min='-4695813.4625989813' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='Coastline' value='true' />
            <format attr='enabled' id='light-admin-0-boundaries-bg' value='true' />
            <format attr='enabled' id='light-admin-0-boundaries' value='true' />
            <format attr='enabled' id='light-admin-0-boundaries-dispute' value='true' />
            <format attr='enabled' id='light-admin-0-boundaries-bg-sub' value='true' />
            <format attr='enabled' id='light-admin-1-boundaries-supress-bg' value='true' />
            <format attr='enabled' id='light-admin-1-boundaries-sm-parents-bg' value='true' />
            <format attr='enabled' id='light-admin-1-boundaries-md-parents-bg' value='true' />
            <format attr='enabled' id='light-admin-1-boundaries-lg-parents-bg' value='true' />
            <format attr='enabled' id='light-admin-0-boundaries-dispute-sub' value='true' />
            <format attr='enabled' id='light-admin-0-boundaries-sub' value='true' />
            <format attr='enabled' id='light-admin-1-boundaries-supress' value='true' />
            <format attr='enabled' id='light-admin-1-boundaries-sm-parents' value='true' />
            <format attr='enabled' id='light-admin-1-boundaries-md-parents' value='true' />
            <format attr='enabled' id='light-admin-1-boundaries-lg-parents' value='true' />
            <format attr='enabled' id='light-admin1-water-lines-usa-tableau' value='true' />
            <format attr='enabled' id='light-9-dash-line-casing' value='true' />
            <format attr='enabled' id='light-9-dash-line' value='true' />
            <format attr='enabled' id='light-admin-0-label-5th-tier' value='true' />
            <format attr='enabled' id='light-admin-0-label-4th-tier' value='true' />
            <format attr='enabled' id='light-admin-0-label-3rd-tier' value='true' />
            <format attr='enabled' id='light-admin-0-label-2nd-tier' value='true' />
            <format attr='enabled' id='light-admin-0-label-1st-tier' value='true' />
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
            <format attr='enabled' id='hillshade_highlight_bright' value='true' />
            <format attr='enabled' id='hillshade_highlight_med' value='true' />
            <format attr='enabled' id='hillshade_shadow_faint' value='true' />
            <format attr='enabled' id='hillshade_shadow_med' value='true' />
            <format attr='enabled' id='hillshade_shadow_dark' value='true' />
            <format attr='enabled' id='hillshade_shadow_extreme' value='true' />
            <format attr='enabled' id='tunnel-service-link-track-case' value='true' />
            <format attr='enabled' id='tunnel-street_limited-case' value='true' />
            <format attr='enabled' id='tunnel-street-case' value='true' />
            <format attr='enabled' id='tunnel-secondary-tertiary-case' value='true' />
            <format attr='enabled' id='tunnel-primary-case' value='true' />
            <format attr='enabled' id='tunnel-trunk_link-case' value='true' />
            <format attr='enabled' id='tunnel-motorway_link-case' value='true' />
            <format attr='enabled' id='tunnel-trunk-case' value='true' />
            <format attr='enabled' id='tunnel-motorway-case' value='true' />
            <format attr='enabled' id='tunnel-trunk_link' value='true' />
            <format attr='enabled' id='tunnel-motorway_link' value='true' />
            <format attr='enabled' id='tunnel-service-link-track' value='true' />
            <format attr='enabled' id='tunnel-street_limited' value='true' />
            <format attr='enabled' id='tunnel-street' value='true' />
            <format attr='enabled' id='tunnel-tertiary' value='true' />
            <format attr='enabled' id='tunnel-secondary' value='true' />
            <format attr='enabled' id='tunnel-primary' value='true' />
            <format attr='enabled' id='tunnel-trunk' value='true' />
            <format attr='enabled' id='tunnel-motorway' value='true' />
            <format attr='enabled' id='road-street-low' value='true' />
            <format attr='enabled' id='road-street_limited-low' value='true' />
            <format attr='enabled' id='road-pedestrian-case' value='true' />
            <format attr='enabled' id='road-service-link-track-case' value='true' />
            <format attr='enabled' id='road-street_limited-case' value='true' />
            <format attr='enabled' id='road-street-case' value='true' />
            <format attr='enabled' id='road-tertiary-case' value='true' />
            <format attr='enabled' id='road-secondary-case' value='true' />
            <format attr='enabled' id='road-primary-case' value='true' />
            <format attr='enabled' id='road-motorway_link-case' value='true' />
            <format attr='enabled' id='road-trunk_link-case' value='true' />
            <format attr='enabled' id='road-trunk-case' value='true' />
            <format attr='enabled' id='road-motorway-case' value='true' />
            <format attr='enabled' id='road-trunk_link' value='true' />
            <format attr='enabled' id='road-motorway_link' value='true' />
            <format attr='enabled' id='road-path' value='true' />
            <format attr='enabled' id='road-pedestrian' value='true' />
            <format attr='enabled' id='road-polygon' value='true' />
            <format attr='enabled' id='road-service-link-track' value='true' />
            <format attr='enabled' id='road-street_limited' value='true' />
            <format attr='enabled' id='road-street' value='true' />
            <format attr='enabled' id='road-tertiary' value='true' />
            <format attr='enabled' id='road-secondary' value='true' />
            <format attr='enabled' id='road-primary' value='true' />
            <format attr='enabled' id='road-trunk' value='true' />
            <format attr='enabled' id='road-motorway' value='true' />
            <format attr='enabled' id='road-rail' value='true' />
            <format attr='enabled' id='road-rail-tracks' value='true' />
            <format attr='enabled' id='bridge-street-low' value='true' />
            <format attr='enabled' id='bridge-street_limited-low' value='true' />
            <format attr='enabled' id='bridge-pedestrian-case' value='true' />
            <format attr='enabled' id='bridge-service-link-track-case' value='true' />
            <format attr='enabled' id='bridge-street_limited-case' value='true' />
            <format attr='enabled' id='bridge-street-case' value='true' />
            <format attr='enabled' id='bridge-tertiary-case' value='true' />
            <format attr='enabled' id='bridge-secondary-case' value='true' />
            <format attr='enabled' id='bridge-primary-case' value='true' />
            <format attr='enabled' id='bridge-trunk_link-case' value='true' />
            <format attr='enabled' id='bridge-motorway_link-case' value='true' />
            <format attr='enabled' id='bridge-trunk-case' value='true' />
            <format attr='enabled' id='bridge-motorway-case' value='true' />
            <format attr='enabled' id='bridge-trunk_link' value='true' />
            <format attr='enabled' id='bridge-motorway_link' value='true' />
            <format attr='enabled' id='bridge-path' value='true' />
            <format attr='enabled' id='bridge-pedestrian' value='true' />
            <format attr='enabled' id='bridge-service-link-track' value='true' />
            <format attr='enabled' id='bridge-street_limited' value='true' />
            <format attr='enabled' id='bridge-street' value='true' />
            <format attr='enabled' id='bridge-tertiary' value='true' />
            <format attr='enabled' id='bridge-secondary' value='true' />
            <format attr='enabled' id='bridge-primary' value='true' />
            <format attr='enabled' id='bridge-trunk' value='true' />
            <format attr='enabled' id='bridge-motorway' value='true' />
            <format attr='enabled' id='bridge-rail' value='true' />
            <format attr='enabled' id='bridge-rail-tracks' value='true' />
            <format attr='enabled' id='bridge-trunk_link-2-case' value='true' />
            <format attr='enabled' id='bridge-motorway_link-2-case' value='true' />
            <format attr='enabled' id='bridge-trunk-2-case' value='true' />
            <format attr='enabled' id='bridge-motorway-2-case' value='true' />
            <format attr='enabled' id='bridge-trunk_link-2' value='true' />
            <format attr='enabled' id='bridge-motorway_link-2' value='true' />
            <format attr='enabled' id='bridge-trunk-2' value='true' />
            <format attr='enabled' id='bridge-motorway-2' value='true' />
            <format attr='enabled' id='road-shields-2-white' value='true' />
            <format attr='enabled' id='road-shields-2-black' value='true' />
            <format attr='enabled' id='road-shields-1-white' value='true' />
            <format attr='enabled' id='road-shields-1-black' value='true' />
            <format attr='enabled' id='road-label-small' value='true' />
            <format attr='enabled' id='road-label-big' value='true' />
            <format attr='enabled' id='light-admin-1-label-9th-tier' value='true' />
            <format attr='enabled' id='light-admin-1-label-8th-tier' value='true' />
            <format attr='enabled' id='light-admin-1-label-7th-tier' value='true' />
            <format attr='enabled' id='light-admin-1-label-6th-tier' value='true' />
            <format attr='enabled' id='light-admin-1-label-5th-tier' value='true' />
            <format attr='enabled' id='light-admin-1-label-4th-tier' value='true' />
            <format attr='enabled' id='light-admin-1-label-3rd-tier' value='true' />
            <format attr='enabled' id='light-admin-1-label-2nd-tier' value='true' />
            <format attr='enabled' id='light-admin-1-label-1st-tier' value='true' />
            <format attr='enabled' id='light-us-admin-1-label-abbr-3rd-tier' value='true' />
            <format attr='enabled' id='light-us-admin-1-label-abbr-2nd-tier' value='true' />
            <format attr='enabled' id='light-us-admin-1-label-abbr-1st-tier' value='true' />
            <format attr='enabled' id='admin-2-label' value='true' />
            <format attr='enabled' id='admin-2-boundaries-bg' value='true' />
            <format attr='enabled' id='admin-2-boundaries' value='true' />
            <format attr='enabled' id='place-village' value='true' />
            <format attr='enabled' id='place-town' value='true' />
            <format attr='enabled' id='place-islands' value='true' />
            <format attr='enabled' id='place-city-sm' value='true' />
            <format attr='enabled' id='place-city-md-s' value='true' />
            <format attr='enabled' id='place-city-md-n' value='true' />
            <format attr='enabled' id='place-city-lg-s' value='true' />
            <format attr='enabled' id='place-city-lg-n' value='true' />
            <format attr='enabled' id='place-capital-s' value='true' />
            <format attr='enabled' id='place-capital-n' value='true' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='normal' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]' value='Year of Year'>
              <formatted-text>
                <run fontalignment='1'>Year of Year</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]' />
              <geometry column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Geometry (generated)]' />
              <lod column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Country:nk]' />
              <lod column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:City:nk]' />
              <lod column='[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]' />
              <lod column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Longitude (generated)]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>City:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[none:City:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Country:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Country:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Year:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]&gt;</run>
                <run>Æ&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-family' value='Times New Roman' />
                <format attr='font-size' value='12' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-color' value='#4e79a7' />
                <format attr='size' value='2.9944751262664795' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ac8rjf1w901u31exdi441g56pyo].[Latitude (generated)]</rows>
        <cols>[federated.1ac8rjf1w901u31exdi441g56pyo].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{705C1B2D-E054-4B5B-AA05-4B36117025DD}' />
    </worksheet>
    <worksheet name='Sport with most medals'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Top 10 sports medal count</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='athlete_events-csv+ (Multiple Connections)' name='federated.1ac8rjf1w901u31exdi441g56pyo' />
          </datasources>
          <datasource-dependencies datasource='federated.1ac8rjf1w901u31exdi441g56pyo'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <semantic-values semantic-role='[City].[Name]'>
                <semantic-value key='&quot;Athina&quot;' value='&quot;Athens&quot;' />
                <semantic-value key='&quot;Torino&quot;' value='&quot;Turin&quot;' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;Atlanta&quot;' value='33.753746' />
                <semantic-value key='&quot;Chamonix&quot;' value='45.923699999999997' />
                <semantic-value key='&quot;Cortina d&apos;Ampezzo&quot;' value='46.540500000000002' />
                <semantic-value key='&quot;Lake Placid&quot;' value='27.293099999999999' />
                <semantic-value key='&quot;Moskva&quot;' value='55.755800000000001' />
                <semantic-value key='&quot;Sankt Moritz&quot;' value='46.4908' />
                <semantic-value key='&quot;Sarajevo&quot;' value='43.856299999999997' />
                <semantic-value key='&quot;St. Louis&quot;' value='38.627003000000002' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;Atlanta&quot;' value='-84.386330000000001' />
                <semantic-value key='&quot;Chamonix&quot;' value='6.8693999999999997' />
                <semantic-value key='&quot;Cortina d&apos;Ampezzo&quot;' value='12.1357' />
                <semantic-value key='&quot;Lake Placid&quot;' value='-81.362846000000005' />
                <semantic-value key='&quot;Moskva&quot;' value='37.6173' />
                <semantic-value key='&quot;Sankt Moritz&quot;' value='9.8354999999999997' />
                <semantic-value key='&quot;Sarajevo&quot;' value='18.4131' />
                <semantic-value key='&quot;St. Louis&quot;' value='-90.199402000000006' />
              </semantic-values>
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Yugoslavia&quot;' value='&quot;Serbia&quot;' />
              </semantic-values>
            </column>
            <column aggregation='CountD' datatype='string' name='[Medal]' role='dimension' type='nominal' />
            <column aggregation='CountD' datatype='string' default-role='measure' default-type='quantitative' name='[Name]' role='dimension' type='nominal' />
            <column datatype='string' name='[Season]' role='dimension' type='nominal' />
            <column aggregation='CountD' datatype='string' name='[Sex]' role='dimension' type='nominal' />
            <column datatype='string' name='[Sport]' role='dimension' type='nominal' />
            <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Name]' derivation='Count' name='[cnt:Name:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Medal]' derivation='None' name='[none:Medal:nk]' pivot='key' type='nominal' />
            <column-instance column='[Season]' derivation='None' name='[none:Season:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sex]' derivation='None' name='[none:Sex:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sport]' derivation='None' name='[none:Sport:nk]' pivot='key' type='nominal' />
            <column aggregation='CountD' caption='Region' datatype='string' name='[region]' role='dimension' type='nominal' />
            <column-instance column='[Year]' derivation='Year-Trunc' name='[tyr:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Year]' derivation='Year' name='[yr:Year:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (City,Country,Season,YEAR(Year))]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[City]' />
              <groupfilter function='level-members' level='[Country]' />
              <groupfilter function='level-members' level='[Season]' />
              <groupfilter function='level-members' level='[yr:Year:ok]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Medal,Region)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Medal]' />
              <groupfilter function='level-members' level='[region]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Season,YEAR(Year))]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action3]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Season]' />
              <groupfilter function='level-members' level='[tyr:Year:ok]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sport:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Athletics&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Fencing&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Football&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Gymnastics&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Hockey&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Ice Hockey&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Rowing&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Sailing&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Swimming&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Wrestling&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sport:nk]' direction='DESC' using='[federated.1ac8rjf1w901u31exdi441g56pyo].[cnt:Name:qk]' />
          <slices>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sport:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Medal,Region)]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (City,Country,Season,YEAR(Year))]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Season,YEAR(Year))]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='quick-filter'>
            <format attr='title' field='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]' value='Sex'>
              <formatted-text>
                <run fontalignment='1'>Sex</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sport:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Sex:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Sport:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sport:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Athletes won medals:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[cnt:Name:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='shape' value='square' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ac8rjf1w901u31exdi441g56pyo].[cnt:Name:qk]</rows>
        <cols>([federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk] / [federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sport:nk])</cols>
      </table>
      <simple-id uuid='{502980A5-4E2F-41E3-BF7B-28F87EA83F1A}' />
    </worksheet>
    <worksheet name='Teams with medals'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Medal Table</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='athlete_events-csv+ (Multiple Connections)' name='federated.1ac8rjf1w901u31exdi441g56pyo' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Top Teams' datatype='integer' name='[Age Parameter]' param-domain-type='range' role='measure' type='quantitative' value='15'>
              <calculation class='tableau' formula='15' />
              <range max='15' min='1' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1ac8rjf1w901u31exdi441g56pyo'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <semantic-values semantic-role='[City].[Name]'>
                <semantic-value key='&quot;Athina&quot;' value='&quot;Athens&quot;' />
                <semantic-value key='&quot;Torino&quot;' value='&quot;Turin&quot;' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;Atlanta&quot;' value='33.753746' />
                <semantic-value key='&quot;Chamonix&quot;' value='45.923699999999997' />
                <semantic-value key='&quot;Cortina d&apos;Ampezzo&quot;' value='46.540500000000002' />
                <semantic-value key='&quot;Lake Placid&quot;' value='27.293099999999999' />
                <semantic-value key='&quot;Moskva&quot;' value='55.755800000000001' />
                <semantic-value key='&quot;Sankt Moritz&quot;' value='46.4908' />
                <semantic-value key='&quot;Sarajevo&quot;' value='43.856299999999997' />
                <semantic-value key='&quot;St. Louis&quot;' value='38.627003000000002' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;Atlanta&quot;' value='-84.386330000000001' />
                <semantic-value key='&quot;Chamonix&quot;' value='6.8693999999999997' />
                <semantic-value key='&quot;Cortina d&apos;Ampezzo&quot;' value='12.1357' />
                <semantic-value key='&quot;Lake Placid&quot;' value='-81.362846000000005' />
                <semantic-value key='&quot;Moskva&quot;' value='37.6173' />
                <semantic-value key='&quot;Sankt Moritz&quot;' value='9.8354999999999997' />
                <semantic-value key='&quot;Sarajevo&quot;' value='18.4131' />
                <semantic-value key='&quot;St. Louis&quot;' value='-90.199402000000006' />
              </semantic-values>
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Yugoslavia&quot;' value='&quot;Serbia&quot;' />
              </semantic-values>
            </column>
            <column aggregation='CountD' datatype='string' name='[Medal]' role='dimension' type='nominal' />
            <column aggregation='CountD' datatype='string' default-role='measure' default-type='quantitative' name='[Name]' role='dimension' type='nominal' />
            <column datatype='string' name='[Season]' role='dimension' type='nominal' />
            <column aggregation='CountD' datatype='string' name='[Sex]' role='dimension' type='nominal' />
            <column datatype='string' name='[Sport]' role='dimension' type='nominal' />
            <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Name]' derivation='Count' name='[cnt:Name:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Medal]' derivation='None' name='[none:Medal:nk]' pivot='key' type='nominal' />
            <column-instance column='[Season]' derivation='None' name='[none:Season:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sex]' derivation='None' name='[none:Sex:nk]' pivot='key' type='nominal' />
            <column-instance column='[region]' derivation='None' name='[none:region:nk]' pivot='key' type='nominal' />
            <column aggregation='CountD' caption='Region' datatype='string' name='[region]' role='dimension' type='nominal' />
            <column-instance column='[Year]' derivation='Year-Trunc' name='[tyr:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Year]' derivation='Year' name='[yr:Year:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (City,Country,Season,YEAR(Year))]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[City]' />
              <groupfilter function='level-members' level='[Country]' />
              <groupfilter function='level-members' level='[Season]' />
              <groupfilter function='level-members' level='[yr:Year:ok]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Season,YEAR(Year))]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action3]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Season]' />
              <groupfilter function='level-members' level='[tyr:Year:ok]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Sex,Sport)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action4]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Sex]' />
              <groupfilter function='level-members' level='[Sport]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:region:nk]'>
            <groupfilter count='[Parameters].[Age Parameter]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNTD([Name])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:region:nk]' member='%null%' />
                  <groupfilter from='&quot;Afghanistan&quot;' function='range' level='[none:region:nk]' to='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:region:nk]' direction='DESC' using='[federated.1ac8rjf1w901u31exdi441g56pyo].[cnt:Name:qk]' />
          <slices>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:region:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (City,Country,Season,YEAR(Year))]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Sex,Sport)]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Season,YEAR(Year))]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='refline'>
            <format attr='vertical-align' id='refline0' value='top' />
            <format attr='wrap' id='refline0' value='on' />
            <format attr='text-align' id='refline0' value='right' />
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]' />
            </encodings>
            <reference-line axis-column='[federated.1ac8rjf1w901u31exdi441g56pyo].[cnt:Name:qk]' enable-instant-analytics='true' formula='sum' id='refline0' label-type='value' scope='per-cell' value-column='[federated.1ac8rjf1w901u31exdi441g56pyo].[cnt:Name:qk]' z-order='1' />
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Medal:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Country:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[none:region:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Count of Medals:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[cnt:Name:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.4722652435302734' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:region:nk]</rows>
        <cols>[federated.1ac8rjf1w901u31exdi441g56pyo].[cnt:Name:qk]</cols>
      </table>
      <simple-id uuid='{01C512CA-A7A0-465A-865F-6DD25EADACB5}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Olympic Dashboard'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontname='Tableau Light' fontsize='28'>Olympic Dashboard</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
        <style-rule element='table'>
          <format attr='background-color' value='#ffffff' />
        </style-rule>
        <style-rule element='dash-title'>
          <format attr='text-align' value='center' />
          <format attr='background-color' value='#00000000' />
        </style-rule>
      </style>
      <size sizing-mode='automatic' />
      <datasources>
        <datasource name='Parameters' />
        <datasource caption='athlete_events-csv+ (Multiple Connections)' name='federated.1ac8rjf1w901u31exdi441g56pyo' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Top Teams' datatype='integer' name='[Age Parameter]' param-domain-type='range' role='measure' type='quantitative' value='15'>
          <calculation class='tableau' formula='15' />
          <range max='15' min='1' />
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='federated.1ac8rjf1w901u31exdi441g56pyo'>
        <column aggregation='CountD' datatype='string' name='[Medal]' role='dimension' type='nominal' />
        <column datatype='string' name='[Season]' role='dimension' type='nominal' />
        <column aggregation='CountD' datatype='string' name='[Sex]' role='dimension' type='nominal' />
        <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
        <column-instance column='[Medal]' derivation='None' name='[none:Medal:nk]' pivot='key' type='nominal' />
        <column-instance column='[Season]' derivation='None' name='[none:Season:nk]' pivot='key' type='nominal' />
        <column-instance column='[Sex]' derivation='None' name='[none:Sex:nk]' pivot='key' type='nominal' />
        <column-instance column='[Year]' derivation='Year' name='[yr:Year:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='98142' id='15' param='vert' type='layout-flow' w='99034' x='483' y='929'>
            <zone fixed-size='103' h='12892' id='16' is-fixed='true' type='title' w='99034' x='483' y='929'>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='solid' />
                <format attr='border-width' value='1' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
            <zone h='85250' id='5' param='horz' type='layout-flow' w='99034' x='483' y='13821'>
              <zone h='85250' id='3' type='layout-basic' w='89378' x='483' y='13821'>
                <zone h='41892' id='1' name='Olympic hosted cities' w='44687' x='483' y='13821'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='solid' />
                    <format attr='border-width' value='1' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='43358' id='10' name='Event count vs years' w='44717' x='483' y='55713'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='solid' />
                    <format attr='border-width' value='1' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='43358' id='13' name='Sport with most medals' w='44661' x='45200' y='55713'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='solid' />
                    <format attr='border-width' value='1' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='41892' id='21' name='Teams with medals' w='44691' x='45170' y='13821'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='solid' />
                    <format attr='border-width' value='1' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
              <zone fixed-size='160' h='85250' id='4' is-fixed='true' param='vert' type='layout-flow' w='9656' x='89861' y='13821'>
                <zone fixed-size='99' h='12427' id='11' is-fixed='true' name='Event count vs years' param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]' type='filter' values='relevant' w='9656' x='89861' y='13821'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='solid' />
                    <format attr='border-width' value='1' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone fixed-size='255' h='30546' id='6' is-fixed='true' mode='checklist' name='Olympic hosted cities' param='[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]' type='filter' values='relevant' w='9656' x='89861' y='26248'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='solid' />
                    <format attr='border-width' value='1' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone fixed-size='145' h='17770' id='8' is-fixed='true' mode='checklist' name='Event count vs years' param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]' type='filter' values='relevant' w='9656' x='89861' y='56794'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='solid' />
                    <format attr='border-width' value='1' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone fixed-size='99' h='12427' id='19' is-fixed='true' mode='radiolist' name='Sport with most medals' param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]' type='filter' values='relevant' w='9656' x='89861' y='74564'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='solid' />
                    <format attr='border-width' value='1' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='6504' id='23' mode='type_in' param='[Parameters].[Age Parameter]' type='paramctrl' w='9656' x='89861' y='86991'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='solid' />
                    <format attr='border-width' value='1' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
        <zone h='16144' id='17' param='C:/Users/Nihar/Downloads/31tNlIYVx+L._AC_SS350_.jpg' type='bitmap' w='25148' x='10202' y='1858' />
        <zone h='17073' id='20' is-scaled='1' param='C:/Users/Nihar/Downloads/Capture.PNG' type='bitmap' w='15993' x='69403' y='232' />
      </zones>
      <simple-id uuid='{8AD696F9-4AFA-4C39-8504-D7EE173F4477}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='Olympic hosted cities'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[attr:Country:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[attr:Season:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Country:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Event:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Year:qk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]</field>
          </color-one-way>
        </highlight>
        <map-scale-visibility value='0' />
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{BFE1A2C4-CFFC-4E1E-B0B6-DB3BB0276708}' />
    </window>
    <window class='worksheet' name='Teams with medals'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]' type='color' />
            <card mode='type_in' param='[Parameters].[Age Parameter]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:NOC:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:region:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{EE3AC946-8E77-41DD-8745-93BADCFC4996}' />
    </window>
    <window class='worksheet' name='Event count vs years'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='212'>
            <card param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sport:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[tyr:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{AC2A2407-5029-4B35-8903-0D5917671535}' />
    </window>
    <window class='worksheet' name='Sport with most medals'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sport:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sport:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1EA61130-C782-4C06-BAB9-996441A33EAE}' />
    </window>
    <window class='dashboard' maximized='true' name='Olympic Dashboard'>
      <viewpoints>
        <viewpoint name='Event count vs years'>
          <zoom type='entire-view' />
          <highlight field='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]' type='highlight'>
            <bucket-selection />
          </highlight>
        </viewpoint>
        <viewpoint name='Olympic hosted cities'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Sport with most medals'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Teams with medals' />
      </viewpoints>
      <active id='6' />
      <device-preview selected='Desktop' />
      <simple-id uuid='{462CD8CF-C32A-469A-9394-C470806512CD}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Event count vs years' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Olympic Dashboard' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nOy9aZAk6Xnf93vzrMq6q6vv6Tl2dmcXuwuAOCgQFEhBDIsiLVEURcoKBy3b
      tBxSOGj6Uij8xfqgCNsR/uCwww7xAyVatIKSKEqkDlOEQFLEAiRIQFhgQSyWuzO7c09fdZ95
      Z77+UJm51dXVMz0z3TMDbP8jOrq7Kisr8833ed/n/D9CSik5wxk+oFCe9gWc4QxPE1r6x9lG
      cIYPIjIBiOOYn//5n+cjH/nI07yeM5zhiUKb/eejH/0oP/iDP/i0ruUMZ3jiOLMBzvCBxpkA
      nOEDjTMBOMMHGmcCcIYPNM4E4AwfaJwJwBk+0DgTgDM8E5BSEj+FYOyZAJzhCUHS2r7Fr/zy
      P+QX/59f4htvvXsg+2D/6h/y6//u9SdyJW5/l89/6WvAmQCc4Qnhnde/yD/8l7/Ln/mxn+Q/
      +0/+Cq1r/55f+mefeyopOFquxJXntoAzATjDk4AM+Oe/+WV+7r/6GZYqBTQjz5/9iZ9G7n2L
      Wx3n0OHX332XeEYupJTcuHEDgDt37xLHEe++/SbfeusqsZQEns0ffePrXL+9kwnUsNOkP3a4
      ff0qX3/jW7h+mJ1PqCqmogJnAnCGJ4DJ3nuUL7yCoYgDr/+p7/8kX/vGtw8d//ZXPs+X37qb
      /d+78y3+zZe+BcCv/+O/zy/8vV9kuzOhdetN/qe//Xf4f//xr+HF8Aef+xVe++Z1AK5+/Uv8
      n3/3F7h6e5/A7vG//a//C/faIwC8SZN/+9tfAeZygc5whtNAv9tlqV4/9PrS8hK9G61Dr//Z
      n/jL/M//16/wmVf/W4SUfP7zv8uP/sW/DoBSWOZv/I2/jgDi0OeNa9v8lz/zVwF4dTPPP/qD
      O/zpjz0PKPzIj/9lvu+lDQA+9NwG//Bff46f+y/+owPfdbYDnOHUUSgWGY3Hh14fj8ZYlnXo
      db2wwsWiw/XmGBm73O7D8yuF6ZsCZveR41oQ5cY53GH70OtnAnCGU0d183nat94+5OZ8/fVv
      8pEPv3z4A0Lwl37qL/Kv/sW/5t3Xv8iLf+KHHvsaAm+MmS8cev1MAM5w+tAKfOblVf7Zv/19
      ojhGSsmtt7/O1UGOj5yvLfxIef1FtP4Nfu21N/nhP/loNSpRNP2uKPT41V/+R3zmh/7M4Ut7
      pDOf4QwPic/++E/ztS/9Fr/wC7+AKgSlxib/3c/+NYSYKjSmVWV16f3pKITgx/7M9/HLX96j
      oL+v9Jzf2po5RuHihfPZ/6pZ5NxKamvE/M5v/Bp//OU8USz5Ez/4F/j4C1N7QNVybG4sT8+R
      FsVHUcSXv/zls4KYMzwTkFLyuX/y99n6zE/y4fOHDegH4Wu/9etE578vM4KPwtkOcIZnDm5v
      h3/wT36dfOMi/+EjTH4ARVGQQjzwuLMd4AwfaJwZwWf4QONMAM7wgcaZAJzhA40zATjDBxqZ
      F0gIwe3bt3nttdee4uWc4QxPFuKMHPcMH2Qc4Ab9whe+gKKcaUVn+O7CpUuXuHDhAlevXmV3
      d/fAewe4QTVNO4sDnOG7Dq+99hoXLlxgd3eXz372swfeO1vuz/CBxpkAnOEDjUMCYI96vPHG
      G/RGNgDvvP3OI504cIbstPuHXvfsLjduN491jiiKuJ+Jvnv7On3bP/T6oLPLwPaTz09PcOfu
      3UPHneGDhxvX3mZgewAEzuigAMTegH/7ha/y6oc/zNde+zx9N+LGjevIOCKKYkAShiFRGBIG
      Pn7w/m8pJWEY4LouUkqEoqKrKlJKfM8jCKdFyYHb5+52C9d1iaVM3ncJwwiAKAxwXY84jvnC
      536D9tghimLiKMT1vOmETs65c+cGQzcpdk6/JwhRVQ1FwBd/6zdpDWzCKEbX9ez8nudPeWji
      CNd1ieL4CQ3/GZ42vvH6H/K116f1xd/++lcPZoPefusbfOwn/wd0TeNPfvwKX/3jOwD44xa/
      +fvv8ON/9tP85ud+l5y0WX7uJa7+0Rt86KPfw9V3rvHjf/6H+Sf/9Nf42EdfodkP+MzHNvn2
      twecq7o0bYVarcrLVy4DcOfGe9TMIZ3AYs106Icmk+4eH//+H+T3/91vc+m5S6ydu0C73eTW
      zRvoFzb56h9+lZWlEp5WpyqGdDyFzm6L5Vem1/7uW9+gOZHUajVyk13c5Q/Rare4ffMGxgvP
      88bXv07jT38/v/Olr9Moa+hLz9G++S1WNi9Qbaxyfn3lCT6GMzwt5CtrhHYHKWP2RuHBHUBR
      FOJkNYzjOHOJmuVVNK/L7avfZOtDn0DRcrz86is0ajVeevVV6pZJBKxvXeSj3/NJgkk3O+e7
      d5r8yU99Ipv8ABcuX+EjH34VezTg5k6HT3/vx/jEK+e5en2PeqXI2HbRjRzr65u89PIrYO/R
      7HnEisGw3+LGdovv/9QnubS1PvM9e3z/pz75/vcoGhsbG7z4oZepFvMA7N38Y8aRhmJa9Fp7
      LDfqjEZjlIQi4wwfDFxaLvDOjZtYtfWDAnD+lU9y4xu/x3A05Pe+8R6ffDmtvhF8/yeu8Mu/
      +U0+cvnoldKejGnv3UWYpey19XqB9+7usd9crPcvl3Pc2G5y9b17bG0usX7xea5sLfH6H71N
      uWjSbHYwissUCgZXXniel154npIpuLPbZnf//XNu1Iu8d2eP/eb7LAPlYo79dgc/mKpXS+sX
      MDSFF55/nhcuX6RcX+EjH36Zb77+ZBjJzvBs4PIrH+G3fv1f8vKHXwaZIAxD+cUvflH6zli+
      /fY7cuL6Ukop+72elFJKf9KVv/nbX5JSSjno92Q099t3RvKf/uqvymvXb8kojmUUunIwnMg4
      juXdW9flXmt6njBw5XBkSxmFsjcYyjiO5J2b78lWdyillLLX2pPX3rspwyiWcRTI965dlRM3
      kJNBV779zjXp+qGMo1DeePea3G+2pBeE0xuY+R53MpS2Nz3u+rtX5djxs/sYdJrynWvvST+M
      pD3uy7ffuSodP5Rn+O7FF77whex3r9eXUsay2dyXUkp5rIIYKWPe+tY3ee5DH8UyFqsLcehz
      Z2efi+e3Fr5/hjM8Lbz22mt89rOfzX7P4lglkUIovPrRj9/3GEUzzib/Gb7jcBYIO8MHGgd2
      AN/3afV6hFF0Yl+gAJZpAjCaTChaVkaF0e12sSwLRVWJpCSMY0xVxTQM/CAgCEMiKUEIcrqO
      AozGY6qVCpPJBNtxaCwt4fg+D/Lkyzgm9Dxq1Wr2/cdFGIYMh0NUVUUYxkN//jQh4xjLMJi4
      Lop2eENP30cIJp4HcUwUhqiahq4o5HK5E7+mMAzpdruYhQJaEn/J3vM8KqXSdExHI/R8/tQS
      MHVNo/iA+zs0YtvdLkPbPrGLUH2f58+dww8C3r13j1cuXZpOJCHQNI3xZMJgNEI3TdquS+R5
      PLeyQn8w4M7uLoWlJRRV5UKthqYo3Lp9m5defJFut0u322U0HLKzv49eraLnckdOzjiO8ZtN
      lup1zp8/j6oez/U5HA6zINpbV69iNhrPlgDYNlfOn+fGzg7SMA69HwcBz6+uYjsO270e0vPQ
      FYXG0hJ73S6X1tdPXAiklPR6Pdq7uxj5PIqqThe5ICAXRWhbW0wmE27cuMGl557jTruNXjjM
      2nbc7wIWPpN6qcQL6+uHXp/FA20Az7aJgoB8ufxIDz7Ude7s7eFHEbGicPXddzm3sUG5XCaX
      y2GaJvlcDsd1kbaNlstxc3cXP4q4vLXFKAhwgd5oxEq1imAar1hdXWVlZeqSjaKI7Z0d1JUV
      1Hx+4XUoioJeKnHr7l0sy2J1dfVY15/L5Wg2m7iex0q9TtO2yS14WHEUIRTlkYUjjmOiIMgm
      y3HP4/g+d+/epVQoMIiiA5+Lo4iyrqOpKo7nUbMshmFITteplssUCwXUU1h9hRBsbGxg7+yg
      KQqGEOR1nXt7e6xtbSGEwLIsPvShDyGEIJdE8RXDQMYxQgjEMa4rCkMsKXGCAGmaKMdc1Gax
      UACklMRRRDgccmlri36vR+j7jMIQoSj3XWlTxHFMHIZohoENCF1HUxRymsbY8xg3m6wuLaFp
      GoZhIIHYcQhUFSOfxwhDioUC0rZxXJeJ7zMaj9na2sqk3rZtLMviwoULWJbFt996i/rGBmqh
      sPD6IkWhsbrK9s7OsQWg1+vR6XRwhaBeKCCPUA9D38c4QvjuByklzmhEf2eHQj6PaZrkKhVi
      0zyWapCvVOh0uxi2TWgYmIVC9rnA89AS8tlyocC9Vosrly4xGAyIogh9gcp0UlBVlfVqFYSg
      XCwCsDSjfiqKkl3n5UuXaHU6KIpCzjQJo4h73S6KYaDe5xplHOMCUtePvaPPY+HZQ8+jbhgs
      X76MYRjZDTiOA0LQ7fdxw5AoivCFQNV1hBCZ4PjjMYHvY6oqdhyTKxTQDANF0/ClpGqahGGI
      7/uoSb6Qrmk8t77OOzduIE2TMAgQQqAC9nBIoVrlxu4uK5UK0e4uQRjieB6Nep2LFy7QaDT4
      yIc/zJ27dxGahrpgW1fimHI+zzCc5i4dZ5U1DINyucxaqcSt7W2spaXFxz3C5I/CkP3r1zFU
      lReff558cg4zl2O70yFKxvV+EEJQSK/J8/AHA7RiEVVVp2OeTIwwDDETVa5SqTz0tT4KyqXS
      gf/vdy/Lc+PaHg4JFSXbWX3bRkpJwTRxfB9F01ATe+xx4vgLrCZJTgjWkxUynkkUy+VySClZ
      X1nJpLfd6eD4PoMgwG61puqSafLy88+jaRp3t7cpFQqUSyW2u128MGTiOCyVy+TzeaSUNFst
      dF2n1WzihSGabbNcKPDNt99mY2kJPQwJXJdSo0EcBJi5HJ1ej0hKttttatUq5XKZer3OvXv3
      cCcTCgsEQKoqQ8+j0+8TRRHaA1ZAKae5RdVqlWvXr2MUiyem//uui9Nq8epLL1EsFimVSvT7
      fcrlMnfv3mWlVOLmvXso+TzGgh0tCgKUMETk81naiqrreHHMc5UKru+zPxzStG2WajWEEPi+
      T6/fp1wqHblipt8j75eGewTup48/LMqGQX80YnV5mSCKGPs+fdvmuYsXEUIQhiHtwYD2ZPJI
      i0+KQzNgKZ+ncYRRlN5gOnhSSkzDoLG0RG0ywU5W9tXV1WwQLl+6NNXphOCFzU063S6O53Hz
      3j2KhQKO5zEZDnE9j2K9jqKquI6DIwSaYWCYJhe2tnBdl47ngapSr9Xoui5+EGDkcrzx5pu8
      fOUKy8vLNBoNbu7tYS1Y4fVcjkGzyVKt9sAts9vtksvlGAyHDF0XV9dPTGUIg4DWjRt84mMf
      IwgCxuMxvu9jmiau67K2toYQgleuXEEIwb1WCzexL3zbRhECVJVYUfD7fSLPo1itkhMCxTTJ
      mSbFQoFCPs+tnR1cz8M0DLwgIJaSdrt9QAVMd+/ZZ/ywkElm70ktEI1GA03Tsl2kXqlgdbvZ
      +TVNY21pibxhsDscosw5AKSUSM974PcceqIjx6E8JwCzAySEIEr04PSmpZQULIuCZR0YwPRz
      s6/VazVu372L4/tEwKjfp14s8vylS3THYxRFwRmNGI/HlAoF1hJhmtg2e7dusfXCC8g4RjUM
      cqZJXlHIra6y1+2ysrLC5uYmjuOwfecO9a2tg3q0lAybTfTaYkruWYxtm7dv36ZYr6Pq+mNt
      s7OQUuIMh6xvbmbGPMBgMMCyLKIoYjQaUSwWUZJJv7Wywm6rxSiOMTSNgq7Tc10qus7Gc8/h
      eR65XC5LZkzvOZ/L8fzWFpqmEYYhQlUp5PPs9vsHjnvUST97T497jnkIIajNPCchxCE1SQhB
      pVRC1zTudjow76I+hl1wSAB8Ibi5vc1avU4x2fJnpTtO+N1T3G/lmH3PD0NURUFTVS5sbXEx
      udB+v0+73aZULFJKbA0hBN1E2lNjqVQscm5lBce2yVsWClPD2gsChGmixDFxHKOqKpcvX6Ze
      r/PGm2+ydP48ehKHiOOY5UbjAMX2Ivi+T3M8prJy8inSQghylsVSPk+tViMIgimRq5SZuiml
      xLZtoijKBGFteZnh9jYScIKAoq5zbm0NILMdpJSHDGdFURiNRrT7ffKmSS6X49y5c4dW6pNY
      vdOd/kkhnV9WPs/5RoN3bt0iXy6jJLaTOMaOfegILQjwwpD3btzg1ZdfRtO0hRM+xVE3PCs0
      ju+zNxySN01WSiXU5DNCCCqVSuZnT1+TUlKv17MBTSdHzjC4dv06QRxT2ZjSXiu6ThSGnEs8
      DL1ej7evXuXypUtc2tqi7TiZAAhFwXYcCkf4nMfjMXt7e4w8D3POUIyjiN7ODsWlpekOBIRR
      RO4h3cNSSrBtcrUaYWKMp+M06yHJ5XL88dWrFGs1irkcYRiixDGB5/HC888f2JXnzz8/EVut
      FlJROJ/4xGfHe/7ZPuwEPo3V/2EwGA7RNQ3TNNmo16lUKtxsNhGGgX+MeNYhAVhfXqZRrRIn
      /tj7Tf5FmDei0oehqSpWEs2dP352Qi5aReI45tatW6CqKIqCObMzhYl3QKtWgamhjq5zZ3eX
      yXhM/fz5A+eOjlilXNflzatXCeKY2vr64WuIImQYYvo+K8vL1Ot1hqMRt7td9IcIJLnjMY3E
      CE3H6N7ODk4c44chS7UaiqJgGAaXL13i+v4+nhBocczlc+eIwvBYkzSdzOmOeL/jUjytyf8o
      gpfOz7Ft0xsOWV9ZYWV5mfdu3QLDIBiPWb148YHnOeRo7vX77Ozvs723d+yLSSdt+qMoCpqm
      ZbuHrqpsVCqUEz011W2PurF0xZ9VC7a2tnCiiFdeeomtRoM4Kc3cqFYpqiqu6wJTAXjhwgXc
      IKC0tnYoOFJeWeErX/kKvn+wlvjqu+9iNRrUNzYWXpuiaZjFIhvr6zQaDVRVpd1uo86F+u8H
      KSXheEy1Ws08alJK7DjGlxKF9ydkHMdoqoo3GhENh9OxEwJd1x848WZtswcdt+i1dOznz/Gg
      cz6qQDyK2tRut3nv5k3GUmLUarRsmzvb24yDANUwMIpFxo9iBI+BfhShzxSUP+hCZycqcGiS
      KzPCcRzMToL9/X1G4zGjMETTdWzXpdXpEPg+wrJ4d3ubYrVKb38fIQT5fB5D19FnjLxZ6KZJ
      oVQ6oAZEUcTYcSjfxzhWFAWjUKA3HqPpOq3BAFvT0I4ZgInjmPadO1xYWyOKokzv73S7TCYT
      tpaXqVQqByaRrutcuXgR1/dpJDvcw2JeJZpdbWefWfreor8X/X+/75t3h56GXbCysoJQVbqJ
      Q0bRdZwoQjMMAtdFM02CYwQSDx3hjEYYnsflzc0DF36UzjmL9OajKMpWkUXnWDTQiwZJCEG9
      XicUAqtWwygWudfvEwJauYyqqhiJ+pGrVLi9u0t/MOCdd9+dHrNgdVZUlUjXp0G9BHfu3EGd
      SdI7CqZl4agqt3o9bEBb4HpbhDiK6CSTf3V1NVP5dvb2aDoO5Xye+swELxaLDIfD6d+FAo1j
      eK0WYV4NTf+Gw5P/Uc593Pkw7zh5mO9Ix2EecRxTLBQIZ3ZyRVXRTJPQ84iPmdB5SADqhQLP
      J777AwfOhK7TiZwmtaWvpepPevGLVhEpJQPHoTeZPHCApJRcu3kTZnrJqoYBif7sTiZcWFqi
      ruuUhEArlWg6DrlSCa1QgCMmdLFe5869e+9v6YBVLh9rwICFuTpSSsbd7sLjW7dvc3FjA820
      ePPa7Uz9GiQrVT6fPzCO4/EYM1GRTmL1nPfRp3/fTxU9aRxXPYrjmHa3S6vdZjwes9tuH36/
      1+Pa7i63ut1DKqiqaeQrFVRNw13Qm3geh+MAoxFxGFKr1bILTrfrnZ0dXNel2+vxSuIhUlUV
      VVUzDp5Z9WV+AABiKbE9j3ISBZ69sXk1yXYc4lwObWYrE0Kgp26/5PdG4g68ee8ewyhCsSwM
      3z/y4SqqyjAM+fobb1AqFhk7DsYRKQ7HhRACK/EcSSkJPS8zjlVFwbZtvnL1DjdaLpuNaRRc
      03UkMJlM6PkDnP4e1YsfI4xjeuMxq6XSsVWshfc5M26L9Pen6b1ZBCmnkX0bCIdDpKKwmjhk
      0vlxb28PW1GmC+H85+MYZjyHi9LD53E4DiAlkW1jmCaFRC2QUnJ3e5swjnGDAE9KbuzvU87n
      KeZyeJ7H0tISvu9jGMZ9V3QBrB6x2s57JCaum6k4i25W1XXcxNARQrCxvMzw7l3iOMbudlGW
      lxeqQUA2We/evIlpWZgnsBLOJm65k0kmADFQrVap5LvI0J/yIcUxwdd/hY51mdza84Tv/iuW
      5R7XtQZbq2sUDAPlGGrngzCrds6P73HU2tPA7PUIIXAch3w+T6vTYRLHKKqKWipR0zTG4zE7
      zSZGuUycJPcdlcGaLrqqphEFwbSW5AE4JABWtcpgMuHe3h6FXI5CPk+1WqUzHhPGMaV6neX6
      tHOfk3yppWncvnOHSuITn82xSYNn8wOwKPw+u2JLKRHJSqolfvxZCEUh9n0qybWkKlnkuiiG
      wbmVFXa7XYrLy0faFwCrly49cJCOiziOkVGEMx5TmtlRzEIBy7K4tFEjiCVrq6vIOOC54R8g
      jRyi+km0V/8S0jK4VF2jWCweGLNHnahptDf9vegcj5P78yiflVKy024z8jyiIAAhkIqC8P1p
      OnmiGVhAwTS512xSajQAHuhxm12ANMMgP5eMtwhH7xGFAsMoQgQB491dRt0u1Y2NQ25FLwzx
      w5BYSro3b1Kr1bhw4UKWLnE/z1GKo7wFS7UaEdBLMkPnPy9UlaFtU0yMSlVV+chLLzFOXI22
      beP5fhYIW4ST0oGllLRu32apVJqqNnGc5bSX6nXu7O+jlSxevKSgqAqRVHn9pf+RYq0OjkOp
      XM/skPlrOmqiLRqT+ffnF5mjjn0ULPIw3e96AVq9HqMoQjFNlNnnkqizURiSi2M2V1bYa7XI
      HWMSPw4W7iVCCBCC2PPo9/t0XRezWMScMUZnIQF0nZHnUSwWGY1GmYH8uN6GgmlSVVWUIJjq
      eOl3xjGebdMdjw9sqYqiUC6XkVKysb7OpH+Yn/S0oCRu0Y05e0JRVcjnmbTbhEC310NKSaFS
      wyqWuLi2xnK1SqlUOuRciMKQ7evfJkqKXWajxbNOiXlPz+x7i457HMFfdI6jXptFt9+n63n3
      LVxR45jzq6soQlAtFh+pyCU4hv8/xUIBCH2f3vY2seeBZaHnclSTDMWjIISgtrnJzdu3mUwm
      DAaDQ7bAo3gdCpbFSr3Oc2trFBWFOAimOeJC4E4maHCABDeFlJJ8Pk/JNIkSXtLTRN4wKFcq
      uJ5HGASHBD+OIs6fO4elKEwmE969e5dCtQqKgu956JpGP0nT7ifJakIImu/8AZeu/V323/tm
      tuKmAqIoCmoSHZ9d7dPX0mBkHE+5UVOHxexn5oUqxf2eUzyz0h8VJJvV8YUQ2I5DczJ5oGFa
      mfGIdRMvznFdminut+PPY2EcYNzrYVWrxJqGbppoxyjMgKkOFhsGd3Z3F25/swIxKwzHiVoC
      bDQaXGo0qGkaEigYBpeSrMqFN6coXDx3DjEaHcsl9qhQgbppsl6pUF1eRhGCedPdME36vR77
      +/vsd7tITcNIqu5C3ycIAsLE+1atVgmCAE3TqD33cW6t/wSNiy8fcjnPujbT32n03XVd+v0+
      w+GQKIrodruoqorneQdc1ket2kc9Cy8MsZMV9qjJPu9pklKys7/PZDAgCgJ8xzny/On3246D
      kxTvu5PJ1F54CEgpiY+x8B2aOblCgerqKrliMfOUPBSEIJSSN7/9bfw5V+T8Fp26UWe3cykl
      Y8/DSXzl8z5r0zAoFQr4tk3Osg7k6C8KuimKQqlQwJLyobbGh4HreXiOQ6lUYmDbDEcj1ms1
      As/Dt8e4730Vw/ep1Wp8zysvU+39MdXY47mNDV594QUuXLiA7/tUk2CYlJJJEicplCpsfeJH
      sQqlbMU/ONzikGBsb29jWRZLS0tUKhUsy8KyLJrNJnEcMxqNFk7+dLwWnT8dz4FtYy5YEOM4
      ZjKZMJlMDqRap9haX6dRKrFqWfij0ZETOogifN/nXpLeDNMYTWoAyzg+oAovQhzHjLtdvGMk
      wx0SgOMUI98PhVoN1TAwazWuXbt26H0hBDt7La7fvje9gOShzm7Luqriz2x7sztEHMcYuo6l
      6xkVe3rMbA5L+rdhGKyvr7O8tIQ/E/09Scg4ptvtstNuE/g+58+d497v/Dyjr/8G/vWvsH7n
      N2DcYm11lUm/zZXxl5Dta4dWTNd1M3Uunaj6zGSbnbTpuGXVYKqKrut4nsfy8vI0FhGG02L7
      KMIwDFZWVrAsC13Xs3LU+VhB+ozS/33ff39xAmqFAlriUUqvRVVVnGQBqFQqC89tmibnz52j
      Wi6zVCweWVvthSGtXg9xn6KsKMmiDXyf0Pdxx2PswYBRt4tMatGL9Tr5YwQ3T7wqWlEUyo0G
      URjSv3OH3d1dlpYaaJqaPezf+MNrjNyY/2a1cSAKmrrscrqOeR9dUVEUNhsNBoPBgdfnhQGm
      D3O31aLVbKI8IvXGg6AZBh4QJ96fW3fuYLb+CMtYp2quoApJff05ADYvXeF28LOo+Wrmmkx3
      wHK5jOM4+L7P6uoqURQxHA6zmoBZ9TGKIgaDAblcDsdxMqFI9f35MQEyz1wul2N/fx/DMNB1
      nUJScqkkATshpjlVo9EIy7Lo9/tUKhUUIdB0/YB9k7q802cbhiG5JDaUXsesqjYYjZCGgb5g
      FZdSMhgMpjn9R6m1CWsGTG2dOMn/EUJku8R8isp9n92xj3xIKKqKUShw49Zdfvl3r/Ejn9ji
      5RcuIITgP/j4RRwvQNf1aaXS3DacIooicrlcFgmcfc80DFaSlS79nBDTarXdVoux7xM4DkLX
      EYZBo15nr9vFyOcfaoCOfa+J/1o1TXxdp//Jv4nYeZOBvYv94l9jK0nfGA16lBobLC01skmY
      GqsAlmVltdJpyvR4PCaOYyqVSjYWzWYzy0pNC2Jmd5P7ed+klKwl0XPf9+n1eumigjAAACAA
      SURBVBiGgZ+oaSkRWLqzVKtVJpMJuq4zmUwwTTNTbz3Pm1LbJNcshMA0TTqdziE7I45jgoRZ
      RIkiInkw1SMOQ3TLOlYENx33R/ESzeLUBEAIQWl1FdUYYNy6jWnq2fa+uTYllwpm9MBFsYB0
      BQTodLv4Uk7rQI/YHsfjMY7rYmraNNmtXEYoCuFkwuq5c5SKRd65dYulc+dO7Z5lHJMHXnjx
      Jbbf+xcUJzcpX/lZwihi594dwn/3d5hs/AD6p38qmzCTyQTLshiNRriuSy2pWU5VONM0swq5
      dFzKSTLgcXNs5pEKSLoLBEGQ7TS6rh9avYtJtZ5pmtnCJISg3+9n50gr8uI4plarMRqNMAyD
      yWSSMVHYvj9NcdF15sNaQlFOlaplEU7926xKiZ/4zAuc29zMPBSpi0+Z0yVTzK4YUkpG4zF6
      LofrOLQ6HZ67cCHbOaSUeK7DsNdGyxVRhKBUKtHp9wmDgCgI0HM5vn3jBs5w+FDFK4+CfKmE
      Y9vous7Gj/wtXNdhOHH48lde550b22wpFyEKuPgZlXK5jGVZDAYDCoVCtrqPx2Msy0LTNAbD
      Ie1Oh3MbG9l4aJqG67pMbJvuaDRl2HiE+wrDENu20TSNer3OOKnJnq8CnMesIV4sFrFtG9d1
      D9CtRFGEZVmEYZgdP5pMcIVActgLGEfRfTmATgun/o2xlFhHEFUtyk9JX581EAuWhZXPE+zt
      kTNNtnd2iKVkdXkZVVXpfPP/o978Mq2P/BwXL79Iv98nbxi0223cMGTp/HlKjQbFx0x4Ow4U
      VUUvFtlrtdhcXSVG8H/80ufpuBqlWGM7f5G18srU5x/HqL0e5RmdN45jojjmdrOJHkXsdDoU
      C4VDer3teUhVpe+6WLkchq5j2za5XG5KNPaAXUHKaarx0tJSNu6GYUxLLxPV56gocnqdYRji
      OA6VSiV7VrNpLrOBUD8IaI3HIARBHJNLhMJNXlvEtvck8ERELp9sl7MDNIt065x/bzaKGccx
      Q9tmeWmJvVYLVVEy3VhZeZkOKmub59ltNumMRhAEmLUa1szK+DjRzwdBzmQs6ppGKUkkVBWV
      zapOrj/ilZde5M/9qU+y3WphFUv80m98jaWizp/7zCtMJpNs4gWqiu95eFFEoV6n1+7xf//q
      F/mxT1/h+UtbBMlkksBGuUy9XM7SP1zXnaZTm2ZWPZbe+6yNMBwOqdfrB2wFwzDwPA/HcVBV
      FWsmGXIWQgiazSaWZWWr/uz3zD5nz/MoFArc3t8nUlXarR79Vo8XX8jT73axSqVT35Xvh9Pf
      AZJgRop0gNLtXtO0hRb/7C6QTtxcPo+WMP7qhsF4NGJpaYla7VXkpVfYb7cZxDFqoUA0w4T2
      JFAzjGmKN9OAoOc47Nx6F9ud8EOf/ThSCHzP473XfxtlcIf9D/8YVUshr0VEUZS5MfvjMc3E
      fy1VFRXwEYwcn8FoNGVdNk3W6nWa4zF92yZnGBn7g6qq5HI5giDAtm1qtVpGtRKGIZqmTaPo
      icoy6zGDqY6fy+UYj8eMkzSTVBiiKMr8/MViEWPOmTC7wKiqSqvVAkWhtbeHn6g833p7m/YI
      Lm955IvFhYmOTxKnLgCKqk5TEeYG63O/90fcaY35mT//vZlBNb9Cz64qmqaxWqthJmRZUko2
      NjcRTHXZe/fu0Z1MyNfrmbvuSUFTlEwFWV5eJo5j8qbJ5Iv/O6Y3ZvSZvzU1dgcDiv2b1MbX
      8MIf5Qc//SGW8nkc22YymeD7PjnLIppMsPJ5GqUSw8kE0ajyF/9UkbUkN77ValEoFlHiGDuK
      6Ns2upRUKhWCJA3DsiwURaHX62Xu0tS1mhrdKdI4zOz4l2aS0MIwzOyDYrF4wNO09+43KK1e
      pFhZwnGcTHiiKKKSCGmgaaRn/vClGm4YgZXHeAo6/zxO/wqEyPoBzw5wPmeQN94Plsy/P6t/
      7v7xl1E1ndUXPwVAtVKZ+rSlJEyYoYdA8YR5fKIwzNxs91OfwjgmkjJT9QAmts325g/jT4bU
      hQApqZXLBI2/wK7nYsYxfq9HUdep1Wq89e03UK0KL1QqXN7YyOIjs/yaiqLQ7Xan3iFdpxCG
      BFLi2zZbSRWflBLHcXAS+pfJZJJxDLXbbfL5POUZKpdFDHmz+nu6+KSJerOkaJ3WPqvX/gHb
      Ox+n+eKPMux0qFSrrNbr9G2blu8fysnf2lgjBsJnYPLDE9oB9rtdVKFwd7fJ8xe30DSVH/rU
      KwvtgflclCAIUG98nlgxCC9/IvMcpZ/d2dlh6HnkHrFo/H5QNQ3fcRCqClLeN8kqjqKsVBOm
      zHK55fMUN6dBmrxpMkk8HTKY5uSYpRLN8Zi3//C3+HTrl3it8BOcW/mpA5xI8+OhaRrLSY2D
      quuocYxuGPT7fRRFoVAokM/n8TyPTqcDwIULFwAyn/2i3TbFrBGbqqlpVDeaid4KIVhaXmX/
      yn/OwFORCUmBLQS3vvCLICPEJ/5KRhkfxzF3bt3jxXPreMgTY9p7XDwRMQw0jS+9/m2+vg0/
      HkZ8+KXLh4yyeY/Q7AM3Pv1fo6rKockvxJQm5GGzBR8Gxgzr2v3Qc136wyE132fiujhSYigK
      JtN8k5ViEV/X6UwmUzYJKVFUFakomBuXeXP0KfKbL3Fje3uaB6WqFEwT0zAypuyUDj6KIkql
      Eo7nYSSZsak+PxwOyefzWfpDykDRarWIoogwDDPPz+zqvyieMO+OnkUawd780KdYiyJ29/dp
      DYeomkYQR1TzJgPfQzNzBL7P7k6Tb3/rOtXbv4P1ff/xB0sANF2nsVLmY+/9C3J3V5AvPrcw
      8AWHqTniOKa6tJL9vf/Wl9BLSyxdeHWaNOY4j52/dBw80IOkqoSJgJYKBSpAtVQ6kKJANDV4
      FV3PaPuEEFTWt3DL/yk538e0LIZA5LoMRiPWl5ZoJFVvabpEs9lEURRqlQr1hBEvvb5yuUyr
      1aJSqWTRWSALZNXrdYbDIa7rsrq6ujB9ZBEWCUcKRVEYBwFGolr5l38YxzCQEqTnofo+52tl
      tMo+l+V73HLGj8XofJJ4YopYoVLmSm4XvdvB933yCa03HL/kz3VsCrf+DRNzA3n+Fe41m4SW
      lfmUnyTm1bc4CNio1aglrG+j0SjzuAgxrXs1THOanpHPI2dUmygIMPP5A75wzTA4t7rKpNdj
      PB4TBEFGFqsoShYInHUVw1TNqdVqWR2Aoii0222q1Sqj0QgpJZZlZWP/IMqS9B5nicrS3KXZ
      QptGuczeZIJIUmA8IXC7XUSSHqLl86z+wE9xa/TDFKuPRvNyGnhiAqDpOu4P/E0URWVi2/QH
      A6yZVWA+gDO7Q6QZjYqqEXzy5yhZRe7u7+Oq6pQqfAEWpeSeKKTMaFeklCwXCtQSg7Xb7ZKf
      a/5WLBbpdrucX1vDKhTYabWmpYFBwJXNTUaTCZ3RiEDK6Y6W7BipUWsYRlY8vrS0RK/Xy1b1
      dJxgqjLatk25XM4ySguFQpZv5DhOFuwKj5Evn6pGYRhmcYXZGuN0IShZFrd2drDqdYx0cdM0
      CpXKgcaCpVr9xB7BSeCJmuKGmSOQkvZwSBAEvFivZ6tkGk4XSSpDHMfst9vThn1RxGAywSyV
      0IWgooZMbBv1PvWipzn5ZTL5pZwW7mtCUEzcf4qiZEbsPFJdHeDC+jphopObhoGmquQNIyPN
      Sl2JaR5O6rbs9/tIKekPBuz1+5xfXSWXGLapXj6ZTLLrnE2gS1d/KadN7EajUXZNs7ux67p4
      nkcl8bal6QyZKsfBgFd6fuKD7ICFWg2RPN9nFU9UAISiIICJ77NkWdzd32drdTXLaEwT5BzH
      YWjb9MIQNXnwlZnJ/qU3rvLvr4748R84x9r6yhOxAWYh4ylLcxxFVAsFlkslHMfJmvYdhXmX
      o6aqGe/P/CQpFAq8c+0ajSSHP0VaNKMbBtf399nudDi/vIxQlCn9vKZNU5cVJcuknQ1epa7N
      UqmEbdtZZumsDVCpVFBVle3t7QPNTmZLT6M5x8PEtjFn8u9D3596kJ5gPOZR8FQaZVuVCuMo
      wvE8bu3sHCDVSrMKvbkI8iyqlQJVw0NTBXai1z5JKKqKaVnkcjk2l5ZQEo9Kr9fDu0/V2cMQ
      BAghWF5ZYbffX3jOYqFAWVVxg4AbzSY7+/v0hkOGoxG+7xNGEaOkDDTNHp1NQEsFpVarYVkW
      rusSBAGVSiWLzlcTA3u+5jjF7A5we3d36i5m6hKOo+hITqdnCU9FAIQQKIZBFIY4ccy9/f0D
      zSHy+TzeffTTS5c2+ck/90lqS/UpO0Sy5T9JxFHEcqmUuSSXko6XjuMwPqL+uFKp0Gq1CJMG
      gw/CUrVKMZ9nu9NZKDznz53DSgzQSqEAqsrNToeW43Cn3+dGp8NepzNtZjjDoZlO2lS9sSyL
      YrHI6uoq7YSSMJ/PMx6Ps0BYKhTzcYkoirh57960j1kQECSsD8+Kl+dBOFIFklIS+j6qpj12
      0cEiKKqKUakQRxGuotDqdFhNAjxSTrvGp9KZ6ZlhiIxjJr0ehq6Ty+dRNQ2hqni2jf6IvWIf
      +tqFIKeqNCoVhsPhgUlRrVYJw5B+v09prhndZDLJqqXG4zG5XA5d1zMVJ9X7Z+/ZlJJA06Yx
      hiTrMoWqqlzc2sJxHCKgVi7T7PXwExtF03VGUUTeMLJKr9Q7NLuax3GMYRiMxmOEomAmqSar
      q6t0u11c180CaGnKhOf79MfjaSfHfB58nzjJZ/pOwpECIMS0SZ0zGqFq2pGcQI+DVG+VUmY1
      wIPWDs4f/SrB6mcwVs9PBSIIWC+VaA0GxLkc5ZUVFFXFdxwKwMi2KZZKaJpGEMdHkuKeFCTT
      RndBEBzImdE0Les+Wa1WGQwG6Lo+bbY3GFBKrhHI1A3f97PSzlKpdEDfB6gB13d26Po+5WLx
      UGfLVGX0fZ/9VotIHGwbGsbxlFHb87iSVJ/NR3U73S77joNuGCwlLVZTz49t21QqFVzXpVwu
      8+7uLv1mk/Lq6rSyTohp83LTPNWA5GnhviqQEIJ8Esw5TQghsKVkr91m2G1Ssm9TVmO0MKSg
      aayVyxiaRpxswWqyimmGMe1DXC5zrtGgquv44zGebeM7TlY8fdKQUuLGcbaCp8jlclmjDiCL
      zna7XarV6oHdIPVS6bqeHTc/+VPkDQMX6I1GmSrkeR7D4ZC9vb2pN0pV6bruQqNTScpCo8QA
      ThHHMZ1+n2byuVhKOo7Dtdu3gWnjvvX19cw+8IKAUrHI2vr61D6bPVcUEZ4S6cBp4oFeICHE
      E9HnFF1nKCVxocHklZ/l3Nr6dJUsl+n1eviaNi2XE4IYsrwbPZdDUVWaiUfDKJWm1BlMU7GD
      IDiR6/dsG6Eo7/cj0HX6/T7FuVU57fuVqnIpIdVRyX73W1xSIzOvqiyXSnhhSLfbxUjSn9Oy
      yLutFk4SYT4Kmq7jeF7WiBDgXrOJDQdqcGMpQdcZ2/ZU/VWUzE06Go0oGAbdKELM2SQiCKgV
      izyYiOTZwrORkpdACIFqmkjD4O5ggFBVBu02S5aF6zicX1piPB7THI8h1UmThzdrNKfuVsUw
      GPd6JyIAmmEc4BWqJ82tB4NBplvD1H2Z+tGDIMAwjCzqna764/GYQqGQTXDP8w5VcaU2wGQy
      maorYcjItinVahSLRYIg4N7+PgPXRR5RUzE/tr3JhEbSNLvV6+HMRZHfv1mNndEIi2m3d0VR
      8DxvWk+QZLbOIwwCeo6DmnCjPghSThmyn4TNdj88UwKQIs10BPCBe8Mhm9Uqo8mEpXqdjusy
      r22qQuDaNlII9EQ4YEqTF0fRYw+0qmkH3LLdXo9hp0OhUEBVVUzTxLKsLBhWrVYzt6iqqpkX
      Rohpl/MwDDP7wXVdqtXqoWzL1FPTaDSmJYhBQHcw4F67TaSqU4ZsILTtY9logZj2Wy5Y1lQd
      WjD5fdedRnk1jRi4u72NYRisraxknqHQtmFukofAZDgk7HZZvnDhgUIQh+Gx2R9OE0//Co4B
      VdfZt21yqorsdChbFqMgmHqKhEANQ0whMHWdSCb1slJOmcEU5VQM+CAJYtXr9WlS3mSC53mZ
      EZzuApqmZVQnKeykAGbWgE7Z2nJJS9Q0pz/tJRzHMVY+T+x56EJQ1DRMVWV3MDj2/SmaRnMw
      4EIuN804XTABVVXNJqbreSAltqIg9/fRVRXDsqZ05jOfiaOIKAzJl8uM2m1820Z7AKvgsxIg
      +44QAJhumU4YUimVUH2fStIfWNN1ipUKruNgWVbmpkuDa81Oh0jTcE6YIFdo2jSGsbtLMZ/H
      MIxpi1amk3llZYXbt29nqk6alpymGqTuyMFgQKVSodPpZNQoqWvUdd3MyyOEmLJeDwaU83kK
      hQK266Ieg/5vFpMgYK/dZjwaoVrWoZJENSH3Qgj8IEBPuHdGUtIwTfbG4yzgBclzGY0oVKuE
      iSqnycW1388inkog7HGwPx7T8X06wyGBqmIZBnqyyqasaqm+bRgGJctipVhExNPmFSfpFRKK
      gq+qxEJkhFEpp06q3ztJkTlMV/5er5cZlanqI4TIyhUrlQq5pJ3srO2QClEaWxgOhzSHw4dW
      IzTTZBBFFIpFjCPshiBR17R8nmqhwGqxSAzsTyZEM8avZRjIIEBNBNtzHFbW1g60tIKkx/JD
      jHvg+4deS22Gk+Z3/Y7ZAVJIKQkBTBPb98kLkT2ASqVCGIZZunUURbiui2VZrCWFJE4Y0vf9
      E9uCI0Wh6/usFIvcundvanBHEcNmE1fXcaOInXv3aBSLIKc9C4BsxxgMBgf4ktKyxVwuh6Zp
      NJtNlpaWUBRl6or0vOnfcYwTRY+UByUUBT8tKlrwvpHLEY/H6KZJuVJBJF4fqSiZPSWEoJzQ
      KrZdF9/3sUolAkUhlPIA6dXD2l/6Ucx9iX13knigAJyEAXlaiMIQmUyeWV7M8XicEbY2Go1s
      V4iiCEvXCaMI+wS3aCkE+5MJUlGwfR9FiIxDnzhGLxYZALFtU0uowcMwpNPpZNQks16gKIrY
      3d2lWCzSaDQIwxDP8zLqwt5wSHMyyYpqHgUPeqaBEJRUlXang5GwUwRhOM1+1TQKuk4xl8MF
      IlXNJma6U0nHwZjhfX1cZOdJx/WEzvvA5eNJJ5otQrhgS4yjiJKiYCUrZerOa7Va06ok388S
      wHzfJ5fLUUtciKYQeAn9+EkiKx5Z5Cb0/akv3nEy7v9ZTs+0P0AYhkwmk2lmaWLLpK7UXD7P
      Trs9LTw5ZQ+Kns+z02pRKRRwJhMC25724dU0ikBBVbMSTUPTsAcDnH4fp9/HyOXo7+0RzXX1
      eRbxQAF4GnR185gMh4eSwUQUsbm6Sj6fp91uZ0Ue+XyeSqWSpf5GUXSAw0YIQaFQYLNaJZ/k
      FT0JIVd1HVVRaDQamet0UUKcqqoMBgO6gwG90ejAe/udzrQN7JPId1IU8uUye90um5ub09pk
      zyOGjEe0UChgOw4ukNc04iAgjCLiMEQzTSb9PvFoRDSZMOn3CWbo7IH36xQeRkhE0r7rhATr
      6c/uY6CSdAlMoSoKy/V6Vt20urqK4zh0Oh00TTtU6TQ/wfP5PPl8nhpgCIEUggiwgwB5CgUc
      Wc2uotDpdNB1HdM0MU1z4YMMgoCVUolGvU7g+1POoCjCFgL1CXpW9FwOezym2eux1mjw7s2b
      TFyX2LK4s7tLLokuoyiYioJSKBAaBv5kMtXjpcSTEtnv01hdZblWYzAe48UxE98nTsYlDkNC
      3yc/Q9fyIJxUwdN3hADMQxECTVGIkoSydCVJVYXjIB3otdXV7LUwitjrdrHDcKGP/HERAhgG
      3cTlOVs5NlucXi6XMRJPUrpz3bh9G/NROvY8BtJcsL7vE/f7aLkcWlLq6UiJE0XESRFOfzTC
      s22sep1cuUwuyUgNfR87CHCiiMF4TDGfp5q4gG/t7U2NcZjWSicxmydpc37HuUFh2kZnbzSa
      ss4ltIJp6eDDYH610VSVc8vLWKeo9rUmE4rlMoVCgdFolAXQZgVhNrco4+V5zEnxOJmammEw
      Zkpwa8UxwnXRw5DAtomSpoVaPk9lfZ1yqYRM6h3iMCQMAjTDQBoGe71e5tYdTyZsNhoIOeVb
      Kq+skCsUGLZaODNJf6eNxxaA+BR8s8dBKCV3u12ihGokbQc0ny68CA8ihvIfY7I8CLGU9JJm
      E7lcjkKhcCBIlt7HaDQ60PklN+MafJSul48rQIqikKtWsRWFSNPwE2+PO5kwaDYZd7vYwyHF
      xHukJl45M5+fFsYLgdA09kcjdtttmo7DvV6Pai6HPRxOff9CUFmZUuD0d3cJH7Ix3qPgsZc6
      RVEO5YU8Kchk660kiWkpAWxKDpsWpzwMttttgrlQ/0nDTQQszRJNKQ8LhQJhGFKpVDAMg729
      vWyHK+g6g4RC5WmmESiKAon+nTcM8rxfPCWEwBOCyDQRQUDs+3jDYUb3YhYKxELQ7fen+r6i
      MEm8Y0IIomS3sMpljHye0POmTcdPMap8IirQqdKPPOB7u0mlU1r0rWlaRg84HA6zJm+zVINH
      Dea9vT3GCRPDaUFKSWkumJNGrdO0h3a7fYDFwbIsqpUKJKtuHEX4jkN4iq1fHwYiCVBphsE4
      CLBdd5rpGYacX1riQrWK3+tlx1dyOcIkz0g1DPKVCrppHhBsVVXJzai0x1HhpHz4TqAPPXOl
      lFnnlWcBkaLQTcoSdV3P0gZSQtcUD5r86blO3QCLYxoz3o40BpBea+rCHQ6HaJqWtUuNkhiB
      mc8jo4hcHFM9hSS/x4XvOGiOg+a6NIpFVldWKJfLUzsgMfTzlsVauXxIlZt9NrMR7tDz7tvy
      dNadrCTR6uPioQQgzcfQdH1aFrggQPWkoWoa3SDg+u4uQVKMkvr/oyjCNE36/f6xzvUk4gEy
      igiDANd1cV03S3RLJ/pwOMw4eFKP1ti22en10HSdyPPYqla5fOECzjOyCKWIfR/N87hy+TLP
      nT/P5sZGtui8euUKFU3Dn0woWxbL9fqhHmFHQUsIFGYhpWTU7TIZDLJKuzSN/mEWsYeyAYSY
      9ncCsnzvU2dgOwYURSFWFAaOg0jSkdPJnEaBU1a1oyClxPF91FOm8pBJrXXabNrzPOykp5ht
      29Tr9Ww8XdclBPaHQxTTRDCNgRSTDNNwLpfnaWZgxnFM2TTZOn/+EF0jTOult1ZXWUvI0ABK
      pkk3IV44CjKpW8glTU9mj1VVdWEz9/nj7oeHnrnz0vW0J/8sxkk6bvoAgiDIJkVaRggHvUBx
      FDHod6dq1Am3T10EVdfZ7fWy7zdNk1KpRK1WY2lpKWuVFATBlNV5PD445olg265LPDP2wQPU
      hNOAlBJ/MsECNopFzq+tZbvXok70qZqavr6xssLyA4rp3ckEz7YzQZg91+zkn63/fpjshWdn
      9p4AJo6Dpmm0Wi263W7WMkhPcnDSTEp4X93Zeev3UL/wt7l96+oTE2ZPStxEfZxMJlkiXDpx
      ut3u+6/Pbf3lpAnH2HEOroa6/sQbzUWTCa9evMhzm5s0arVD4zdr58wvPunP6vIyaqIKLkKu
      WCSOIoSq3vf5POqz+64SAEPTpi7DQoF6vc7y8jJ+kkqQdmEHsmzM27u77Ms898wX0Mqn30Ey
      hVAU7IQ9IoqijFkibU5Xq9XQdR3P9zMW6RR+YttM5uyvJ70TSylZSty198PsLnCUI+Ly+fOo
      Scbuos/nj1FnnDbieFh8VwkAUhIEAfl8PmNfsxIKw7Qpt5OkI++3WjhCUNp4DuV7f5pcsfyA
      k58chBD4M32OewkFOpDZKf1+f6r+zLlM7Tjm3b09wqeseso4ppt0oHlc6LrO1vIy0VNwqjz1
      XKCTNNwKpkmYUKHMcloqioJt2wRBMC0rlBIeccU4KYx9HydR2QpJH+U0nqEoCoVikc6CCaGo
      KjwD9Rkps9+jPr9U+GdtoUVsE6eNp74DnOQkNFU106dTY0wIgWma+L6fMR37vn/qAa8HQtPw
      kt0K3ucASm2XgecRPgO1GPeDEwRTNS259vTnYZF+5mkUXj11ATgp5HV9mliVBMNm9U3f9ykU
      CgwGA4Iw5E67fSrZng+DWEraCYVKipTP3wlD3Pt89lmBouv0hsNDAhCEIaPxmGanQ/sIxuz5
      uoDxZPJUaFKeugp0UnDDkEpSCzDbmgjI7AJVVXnv9m2EaSKegdXVTzw82cQJAjqjEaNHrPV9
      0phd8YMgIIpjRpMJzfEYmUTV4zgmbrX40MWL9Ho9VpMeCrMCcPcP/znj1g343r96qjlYi/Bd
      IwCqlFPqxAWQUnJrZwdV03AVBeUZmPwAUlG4vr1NlAQYozhGNYzviMkPTJudeB637t1j4Hko
      aQxG17OJrCgKwrJ489o1dGC50ThEERm4E4g8jvNUAs8j8Dys8sk4Lb5rBKCUBFSMhP0hXZ3S
      OoH9fv8QD+bThmYYGcOd4DvvYQhFIVVu9PvkJQkh0EslQs+j2euxWq/TvPUWoFA/9wL6yz+C
      m2S9PgiaYTBqtaZsfCcQ9/hOG/MjocGBYEvKTiASXsvgGVn1nwU8TKrASSGlluxMJqiA89Vf
      RCgqd43/HjtpIH4cCCGwqlVWCgV6joPymLyv2bcKIbh69Squ7z/zlfyLMFoQZMn006Rg/gzP
      BvpS/v/tnVlsVfl9xz9nu/vie329g30xYGPABoOBgcwAk0xDZjJpQycdZdIoiapRG7VppVaK
      KvWhmkqV+hC1L31IH9JGqdKO0qhpM+osGYbBQCAwg2HMELDBxgsY7/u9vss595w+GC8H2xh7
      7LuY85Esy/97lr+u/9//+lug+KXpP7q7VzXvfzA2hraM1eekKNLT2jprexSJRGhsbDRdIxjZ
      EPfEwiJDzI4AhmHQ3t6eybpYWKwLbrebkpISIpEIfX19ps9mBaDrOs3NzRw6dCjtFbSwWE+a
      mpp4+eWX+eijj6iqqjJ9Zlp5FBQUsGnTprRWzsJivWlrawOmN0kebd/W/GGeMwAAERBJREFU
      ytDiqca896SrdHd3A+D2+skPpDcQ00pREzE0FJx2mVg0guJwIUuWpi2WwDDofXAfVZve5QyE
      Cs0jgD52j8Zr7Q+zH65kn1jn9Idn1qSOp09/+ORvVaO8d6oRw9A59f4p9LQfpFvkGna7g8sf
      fojucCCJ4sKDMK8/bzoysWHwq/fe44tf+hKXz55mR8Mhrlz8DQ6bSHHlHu58cp7isgq6uh5w
      9NgBWlpuEQwWULd3N6KR4teNH+Jw51G+dRutzVdweLwYsocAYwildZTaRrnRqTLae4PC0nLu
      d9/n8OcO09LSQjAUYvfuOlKRPn7z2z6OP7OLD85cIN8tkRQd5BeWsD28CbsnRIlL5TcXz1Na
      vQ8jNsIHl68jo7J9z2GMSB99g2OMRpMc2VXKO+evE1cNdlaESIo28kMlVFVuzsT/wSITCALB
      /BA+j4eCwkKcKXXhGqCrvZWmpibu9Q0Tzndwu3eckSmVaNd1hhIyDqeb2623MEQb9fv2EbSJ
      KMECwuEt1O/djQQkIv0kxXwOHDyAT4miKQUcPPgMw31daMkEWkpH1zUSSY2UoLCvfh9FXgnR
      XUA4HKZ+Tx2KBA5fEVPD9+nvbCFQWgkYGIgE8uamZgeePcq163eorynnzvVrJEQFt0PmZms7
      U9EoBgL3ujpI6RpxwcU3X/09ZBEMw/wci6eP6HDXQgFUbK1m//79bC4JsX3vAZre/Q+Cm3bg
      DRaQ58ujvr6eZ/bveeQuAfQUqdR0fl7F7iM+NYKmqWiGg6nIMGoyho6M3W4jmVQZHR5msfNm
      wdDRUqlp3whBYEuxj3cutrB7+2bKt9Wwr66G82cbZ6+XbG7C5aVIgkAgP5+8YBF7Gw5zoHYb
      t+50sqd2J3Zl2sak/GHEgk2V1ezfu4tfn2t8IgMsi42JzR1AeuONN96A6YOwew/68DhsDA70
      k0gJBAMBFMXJzl1VOD1BHEaEjnt9hAoLCQb8eL0+nG43Xp+PwjwPbV29FBaGkCQbBXlOWts6
      yC8soyzk5nZ7N/saDlBYWsZAdxt2bz6lxUUUFuTj83pxuNx4PT5KQl7udPZQUFiAKEAgFMLp
      9lJSGCQ5Ncmdtg521tXjcc2FL/G43Xh9Xnz5xaQmB7nXN0xBYSGFAQ9dvUNs27qV/PwC3B4P
      HqcdNRal9c5ddtbuweta/yTgFpmls7OTcDg8+9vt8eDz+1FsrjlTiFQqxYULFzh69Gim62th
      saY0NjZy/Pjx2d/zsfYMLZ5qLAFYPNWsuQDSldjAwmItWHMBWNbVFrnEhvEIy2ZytVPIaNiY
      NGEJIA3MuGfmEjN517IdwzAwooOInsJV3b8iARi6Tkf7bSJJAaekEUlCYZ6T4bEJyrftIs+V
      udQ9FrmDER/H0MyxgozJPoz4uKlMn+jBSJhzJS98mI529yzu1/5zVXVZWX4AUcTldDCRiCEp
      booVnREVaqrC9A1P4LXnzab2sTCTa9/JTOrZ9SD+5jce9tjzRhjFiegtNl/oDIC3dNnnyc98
      77G54B733a9wBFCZjMSRRAlSMQaSUJTnpOV2NxVVO2fDWjxJeIunibXuFAzDIBqNLpsWdmJi
      At8q4+fMhGpfDwRJxvnKjxDE9LSTx03lVjgCKGzfsWNBebHlRLYiBgYGePPNN3nxxRcxDINA
      IIDb7Z4N3zj1MPFfXl4eAwMDhEIhLly4QENDw2y8o4sXL3Lo0CGCwSD9/f2UlJTQ29tLMBjE
      6XQyNDTEO++8w8mTJ3E4HCQfBuN1OBw4nU7OnDlDfX39bKbKQCCQ6a8lI1iL4Ayg6zrBYJD2
      9nYUReHBgweMjY1x8uRJTp06hSiKVFZW0tzcjNfr5cqVK6RSKZLJJE1NTTQ0NBCLxThz5gxe
      rxfDMLh27RqxWIznn3+eRCLBxx9/jCRJNDY2Ul9fz9WrVxkfH0cURV577TVGR0cRRZGzZ88i
      iiIvvPDCY1NIbVSsk+AMEQ6H6erqQpIk4vG5ULhOpxOPx0N+fj63bt1iZGQETdOw2WwkEgk0
      TSOZTBIIBLDZbMiyjM/nY+fOnRQVFXH16lWA6WBgqoosy9y/fx+YngrU1tbOJuCbmppC13W0
      pzhu0pobw6WeMMTd08RM1spH/9Y0DUVRiMfj2Gy22UYuCAKSJKGqKslkcjp2PnNriZn5ufEw
      GvbExARut5upqSncbjeSJBGNRmdzoyUe5k6byZvgcrlIJpNoD5N0AAt6f2mZlERPinrjF+jR
      IXPZzV/i/vZbaVsDPM4YzpoCZYCZBjyTGmn+YtY+LyOMJEk4niBrZV5eHjCdY3iG+c+cec/8
      dEYzgltvEpd+iO3wnyIIc43d8YW/BSE7RhxLADnC+Pg4Xq+XsbExHA4H8Xgcv9/P2NgYXq+X
      5MNsMrqur3rnZz0QJBvKjpcRpOw8I7IEkCOcO3eO3bt3c/r0aSoqKjAMg3A4zNtvv82xY8eQ
      JIn+/n4mJyd55ZVXMlLH2K/+Bn20y1woiJDFJ8qWAHKELVu2cPnyZcLhMJFIhCNHjvD+++9T
      U1NDS0sLJ06coL+/P6N11AdbcX71hwjyvMR+oowgZm8zy46JmMWyzDT8rVu3IkkS+fn5RCIR
      9u/fj6ZpOBwOPB5Phqc/AoLDb/6xpTd38UrJXmlamPB4PLz++uvA9GgA8N3vfheAb33rWwAc
      OXIkbfUxdC0jWR3XGksAFqsi9os/wZgaZr49j+DMgzRtba4VlgAsVoWRmMT16k9Annd+IIpZ
      Pd9fgGEsvgYYHh7mzs1PGJnMhWSdFhlDsiHI835yqfEDwz23Fx8BbnxyCdWwMak5CdZVp7te
      G46Zk921RNd1otEoLpdrXU7e51tQxv7vr9DH78GjsVez5DBrtXgChQsFYBgGRaUVlG8q4/7A
      Ms4IFk/Eo7nLPgu6rhOJRBAEAa/XmxYbHn2iZ3p7U5mXCVKUzNudOUg8MrZQAMnICJ80f0pP
      7yD7DqZvV8Hi8cw0fGDW3id9CAiKE8G2dCrUXETXkgsFYPfms7kowGg0ymQkSsAzp3LD0Olo
      u01KcuIQp10ii/KcPBgYZWt1DU4lt4fEbGSm4RuGgcfjWfeGr3VfQh+7Zypb1i0xR1HVRQQA
      PMaBW6CwsIDe4UnUlIhfMuidjFO1tZT+gTFKi/2WS+QaEovF0DQNt9s9a/35ONe/laJ3X4Bx
      c2NPNv07YvWXYd70Rqr/NilBgTV8dzpZqj16A0WLC8Dv9+MMOlFjMfOD9CTNn7awrXoHowO9
      TGrg89jo6Owhv3Sb5RK5BhiGQSwWQ1VVXC7XrCXnZ0VrP0Nq5K6pTL3+c2x7vw7ynMWp/bm/
      RK46gZDjC9z5LLX+iowOLC4AA4GbzU0c+cJJ84NEhfp9exFFmVCgmpQhoEgiCVXFYc/tBVGm
      MQyDRCJBIpHA6XTidDrXNCxJ4uMfoVS/ZJrH2499H3nr8xuqsT8puqbSdm8JAdgUmc3haoJ5
      ZjsOQRBxuebKZvp5q/Gvnkcbvs/nW5d4PIIgIVe/hOh6On1/H0WQZDZv2rS0MVwyESMWT6az
      Tk8VhmEQj8eZmJhAEAR8Ph82my0nglFtBPRkjHff+9USI4DdTkVlpWUnsQ7M9PjxeByHw7Eu
      Pb527yP0kQ7ze2Oja/qOXEdU7Lz2zW8vPgIMDg5x7fI5+ofH0l2vDctMjz8+Po5hGPj9fhwO
      x7r0+ImL/zzd4FPJ2R/bgT9CcGSPp1im0bUEb/3Xjxfv5A8cfo6q3fsJBPLSXa8Nh67rqKpK
      PB5HURT8fv+aNvpk00+mzRTmL2QNHduer09bZ1osimRzcfLVby4ugFstrTzoaGVTzSF2bS9P
      d93WHH3iAckr/wa6+XxD2fVVpJJHE/6t0Tsf2uoYhoHb7TY5rK8l2t2zOE78PYK7wFSerT64
      2URsfHBxASSjI1TsqEOSN8aXmOq7gZGIoNR8Za7s/kdonRfWXAAzYQt1XV/UZMEwdIhPmMt0
      FX28x1w20YPWecFUJigOxFCV+bqpIRAVq8GvgkBZ9UIBJCaHufppK+FwnLItuzNRr3XAQPSX
      IYc/N1cSH0cf7Vzd0wx92hlk/gGjIBBTQYtNzFloxhILUsFqrW+T/PTnCI7525EGoq8MQZ4f
      pkREqTqB4Jy7To8OYkz2mp6n7P8OgrW1uSqGH7QvFIDNE6Sh4SC1dXXWie4SaK3vkbz0QwR3
      aLYsHtyFMtGJokVRAXWpmw0dxwt/h7ypYcXvtf4ba0v77ZaFAhAEgejQPf73rW4OHn6O8uJg
      JuqW1RjqFErtK9j2f2e2bGPZST4dbK/avvgawOHx4VKjJJNL9mO5jyihdZ7HiJu3epWa30Uq
      3ihTP4vHIYjS4gIQRQm7Td7QUyB5y9HpffF5loKp7ktoXRdNAtDuf0zi3D8yf8JvxEaxHfzj
      dFbXYh1QbO4lBCAIxBOqKU7lRkNQnMjlh01lRnyc5Ec/Qp9nNamP30fe9gVse79hfoC8fMxO
      i+xnUQEMDQ9ht9k59c5b/MFrf8jTkvpL3vYCYiC84LxADFZuOG8oC5DttoUCGB0a5PDxL3Lh
      ww/44pe/giNLDIL0qWHU5p+BbnbKkErrEfyPT1FjRAef6B2CpCAV1qy6jha5RXRskYOwjo42
      RC1G2c56eu/dpyR/5+xnhmHQfvMagXAd0YHOWZfI3sExKqtrcK2jS6Tef5NU7ycou782Vx81
      inrjvxf02AsxkHdnJmCsRXZipFQ0W2ihAGpra7nV3kNVsZ9IwcLcq0WhPCbUFJoukyfr9EUS
      VG0to39gFHvx+mWJTOk6gm8TQuXnZ8sEQKz+ytI3PcJauhNaZJah8SnsiozXtXyOg8Xao55S
      uf7p9YUCUBwe6nZNxwJaeL6o09fbR8Rtx5mcZEIFv9dO+91uCjZXr5lLpD7aSezdvwZdB9mG
      6+S/gChiCAKynCVzMouM0tjcTVnIy3N1Fcteu5jxoWRz0lC3Y6Um/yIVNftBEJGlYnQDJElA
      01Kr9l3VI/0kzv7ANLc3YqNIRbuwH/0+sV/+GUYyuqpnW2wMdN1gNGL2T5+Kq58xNq9AoKB0
      hWlSBQHbvK3RmRm/8hnm/vpEL+gatsPfM5WL3iIExZnz0ccsVsand/v5n/MtprKxSBxREHDa
      55qrrsPRPcv3/suRFfMJwe5FCm3LdDUs0kxX/zinm+6ajArv9IxwqKaMZ3bO29kToMDvQpLW
      vjPMCgE8FsVF7K2/AC2OXHk807WxWEOu3e4loaY4sKN0tmzv9mJ2lIdwOdJz+JT1AnC+9AMM
      bTpKtaBkd7YRi6Vp6xnh3Ut3TBbkXX3jnDi4lYbq0iXvW2+yXgCCbM/5IKxPG5FYkjv3zf4S
      l2724LQrPFtr9jDcUpJZt82sF4BF7nDqyl2Gx6fo6BtjIpqgsmRuI12RRX7nQCUVRdnlp2wJ
      wGLN+OX5Fn7/WA2lIS97thbh92S/waAlAItV0dT6gMGxKVNZSjd4trYcm5I7ZvRpFYA+NUrs
      rT8Hbe5Qw9DiyFuOpbMaFiskqabQUmbv5h+/+wnP1pYjz9uafPXzu1Dk3Dq3SasABGcerq/9
      68IPciy3VDaRUDXiSbON0+hEnJHJ2BJ3zHGjY4D+EfMp+3g0zuSUOSRmQtXwOs02N6UhL187
      vtMkgFwkvQIQBFPceYvPzj/89NdE46qpIcqSSGm+Z9l7vS47rxwzm387bDIFeWbfB0EQkMSF
      9jQbIY6p1fVmKYmkRv+ouXc+19xFW8+IqezewDj/9L0T+N3Zv+DMRj6zAHQtSd/QGKXFC02n
      LRbS3NbHz878dtnrxiMJ/G47PvfciGlXJF5/eR82eW6RaVMkfC5rVF0t/w8fmb3R4H8i1AAA
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Olympic hosted cities' width='192'>
      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
      aSaAZJoIIc4XOaWCVwZIhGA0HnPS7XJ8csL9p08ZjkbnHlJ24NdRey76fp3hK8vy8mbykrpl
      2zRtm4ppomb5+rnA2+ucPyteOWdr5Ny6+fuTJYlqtUoky2ipUbu9uclus0mSY4DwHYeNZhNZ
      khgNhzx69IjJZIIsSYtlO52st27domFZOOMxtatXKb4C56Zmmswch2+++eaFRfJCCIIwpPKG
      xSwiSdANY+HaTVct+OMzjOKYaao3v2t4sxlVy+LTTz9lPp+vDfg5sxlWuYwkSfizGTeuXl3+
      lhUj5ceTrutEKe39ZqWCNp9TXpnUy3EHECcJJ/M5YyEYxvGiP1MqabONV/EySbAqybPBl6+g
      ygbIqotz9Tj5FSTvdVrnLXjVa1tdAfr9/nKQBUHAo8eP2Ts8JFYUSLd153Mcx8GSJMLUG6Fb
      Fr+9d4/vnj1jpij0HIe9g4OFypaWY2YxkVs3byLmc8KVVeQiZF1bms3mC/sNj8djvLegZdFM
      E9kw6Kdlonn7rDcc8vWjR1jvobtlEseUNY3da9dwXXfJv5ph+Y5JW896Hp1a7VyuWhzHlMtl
      er3eOeF6Z2cHKQzZ7/fZaLXOldLmsVwTsg4qYRAslopX0PuzQZu5DLOX9KIKptXjZMGLvNRZ
      TatYVXdepgKtmxDL47GQ7qvb67rO2dkZ3W4Xq1DAT2uLo/mc2LIIo4jDbpdpENAqFonimDCd
      wIkQFFOffq3TYdLv85vf/Y4/+/nPUVWVL7/6iitbWzSbTbY6HQ5OTmi/QrdISZaxqlWqaY3w
      Rfc6Ho/RDOOti9q1cpnHR0cL5gxF4bDfJwTM98BYPe52mU8m1IpFRLOJ7/u0Wq3nVufBaMT+
      2RlaoUBZkmitdK0RYpEQmXXwzMZTqVTiI8tiOpthpoJoHZZPLPR9uk+eUFRVrjca1F5w09mA
      z6sr2TL0urbDiyT5i2IG+b8vijVk15mhO53iXCB9i8UiV65c4ac//SlxGqmVZBm9WGSWJOyd
      nuJJEoqmMQxDQl1fCI01Bmq50UAyDKZpV/NWs8nX33/Pvfv3iaKI8koKyItQajR4ure3VgXK
      nAePHj9GecuOLnq6CniSxN5oxONul1hV3ykFfAbfdRmfnPD5xx+zu7uLaZoYqY8+/84fP33K
      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
      QOHsbs0mAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sport with most medals' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Teams with medals' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
