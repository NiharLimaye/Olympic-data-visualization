<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20183.18.1018.1932                               -->
<workbook original-version='18.1' source-build='2018.3.0 (20183.18.1018.1932)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='athlete_events-csv+ (Multiple Connections)' inline='true' name='federated.1ac8rjf1w901u31exdi441g56pyo' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='athlete_events' name='excel-direct.1in3dob0w7vfc4175i5ne14fh61o'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='H:/DCU Study/DM and DV/Assignment/Clean data/athlete_events.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
          <named-connection caption='noc_regions' name='excel-direct.0rcnort16ht0wk17d3o8109mb0nm'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='H:/DCU Study/DM and DV/Assignment/Clean data/noc_regions.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation join='left' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[athlete_events-csv].[NOC]' />
              <expression op='[noc_regions].[NOC]' />
            </expression>
          </clause>
          <relation connection='excel-direct.1in3dob0w7vfc4175i5ne14fh61o' name='athlete_events-csv' table='[&apos;athlete_events-csv$&apos;]' type='table'>
            <columns gridOrigin='A1:O10001:no:A1:O2147483647:0' header='yes' outcome='2'>
              <column datatype='string' name='Name' ordinal='0' />
              <column datatype='string' name='Sex' ordinal='1' />
              <column datatype='integer' name='Age' ordinal='2' />
              <column datatype='string' name='Height' ordinal='3' />
              <column datatype='string' name='Weight' ordinal='4' />
              <column datatype='string' name='Team' ordinal='5' />
              <column datatype='string' name='NOC' ordinal='6' />
              <column datatype='string' name='Games' ordinal='7' />
              <column datatype='date' date-parse-format='yyyy' name='Year' ordinal='8' />
              <column datatype='string' name='Season' ordinal='9' />
              <column datatype='string' name='City' ordinal='10' />
              <column datatype='string' name='Country' ordinal='11' />
              <column datatype='string' name='Sport' ordinal='12' />
              <column datatype='string' name='Event' ordinal='13' />
              <column datatype='string' name='Medal' ordinal='14' />
            </columns>
          </relation>
          <relation connection='excel-direct.0rcnort16ht0wk17d3o8109mb0nm' name='noc_regions' table='[noc_regions$]' type='table'>
            <columns gridOrigin='A1:B231:no:A1:B231:0' header='yes' outcome='2'>
              <column datatype='string' name='NOC' ordinal='0' />
              <column datatype='string' name='region' ordinal='1' />
            </columns>
          </relation>
        </relation>
        <cols>
          <map key='[Age]' value='[athlete_events-csv].[Age]' />
          <map key='[City]' value='[athlete_events-csv].[City]' />
          <map key='[Country]' value='[athlete_events-csv].[Country]' />
          <map key='[Event]' value='[athlete_events-csv].[Event]' />
          <map key='[Games]' value='[athlete_events-csv].[Games]' />
          <map key='[Height]' value='[athlete_events-csv].[Height]' />
          <map key='[Medal]' value='[athlete_events-csv].[Medal]' />
          <map key='[NOC (noc!regions)]' value='[noc_regions].[NOC]' />
          <map key='[NOC]' value='[athlete_events-csv].[NOC]' />
          <map key='[Name]' value='[athlete_events-csv].[Name]' />
          <map key='[Season]' value='[athlete_events-csv].[Season]' />
          <map key='[Sex]' value='[athlete_events-csv].[Sex]' />
          <map key='[Sport]' value='[athlete_events-csv].[Sport]' />
          <map key='[Team]' value='[athlete_events-csv].[Team]' />
          <map key='[Weight]' value='[athlete_events-csv].[Weight]' />
          <map key='[Year]' value='[athlete_events-csv].[Year]' />
          <map key='[region]' value='[noc_regions].[region]' />
        </cols>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>1</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:O10001:no:A1:O2147483647:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Name]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Name</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sex</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Sex]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Sex</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Age</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Age]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Age</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Height</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Height]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Height</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Weight</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Weight]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Weight</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Team</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Team]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Team</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NOC</remote-name>
            <remote-type>130</remote-type>
            <local-name>[NOC]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>NOC</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Games</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Games]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Games</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>8</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Season</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Season]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Season</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sport</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Sport]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Sport</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Event</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Event]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Event</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Medal</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Medal]</local-name>
            <parent-name>[athlete_events-csv]</parent-name>
            <remote-alias>Medal</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NOC</remote-name>
            <remote-type>130</remote-type>
            <local-name>[NOC (noc!regions)]</local-name>
            <parent-name>[noc_regions]</parent-name>
            <remote-alias>NOC</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[region]</local-name>
            <parent-name>[noc_regions]</parent-name>
            <remote-alias>region</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[noc_regions]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:B231:no:A1:B231:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <semantic-values semantic-role='[City].[Name]'>
          <semantic-value key='&quot;Athina&quot;' value='&quot;Athens&quot;' />
          <semantic-value key='&quot;Torino&quot;' value='&quot;Turin&quot;' />
        </semantic-values>
        <semantic-values semantic-role='[Geographical].[Latitude]'>
          <semantic-value key='&quot;Atlanta&quot;' value='33.753746' />
          <semantic-value key='&quot;Chamonix&quot;' value='45.923699999999997' />
          <semantic-value key='&quot;Cortina d&apos;Ampezzo&quot;' value='46.540500000000002' />
          <semantic-value key='&quot;Lake Placid&quot;' value='27.293099999999999' />
          <semantic-value key='&quot;Moskva&quot;' value='55.755800000000001' />
          <semantic-value key='&quot;Sankt Moritz&quot;' value='46.4908' />
          <semantic-value key='&quot;Sarajevo&quot;' value='43.856299999999997' />
          <semantic-value key='&quot;St. Louis&quot;' value='38.627003000000002' />
        </semantic-values>
        <semantic-values semantic-role='[Geographical].[Longitude]'>
          <semantic-value key='&quot;Atlanta&quot;' value='-84.386330000000001' />
          <semantic-value key='&quot;Chamonix&quot;' value='6.8693999999999997' />
          <semantic-value key='&quot;Cortina d&apos;Ampezzo&quot;' value='12.1357' />
          <semantic-value key='&quot;Lake Placid&quot;' value='-81.362846000000005' />
          <semantic-value key='&quot;Moskva&quot;' value='37.6173' />
          <semantic-value key='&quot;Sankt Moritz&quot;' value='9.8354999999999997' />
          <semantic-value key='&quot;Sarajevo&quot;' value='18.4131' />
          <semantic-value key='&quot;St. Louis&quot;' value='-90.199402000000006' />
        </semantic-values>
      </column>
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <semantic-values semantic-role='[Country].[Name]'>
          <semantic-value key='&quot;Yugoslavia&quot;' value='&quot;Serbia&quot;' />
        </semantic-values>
      </column>
      <column aggregation='CountD' datatype='string' name='[Event]' role='dimension' type='nominal' />
      <column aggregation='CountD' datatype='string' name='[Medal]' role='dimension' type='nominal' />
      <column aggregation='CountD' datatype='string' default-role='measure' default-type='quantitative' name='[Name]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[Season]' role='dimension' type='nominal' />
      <column aggregation='CountD' datatype='string' name='[Sex]' role='dimension' type='nominal' />
      <column datatype='string' name='[Sport]' role='dimension' type='nominal' />
      <column aggregation='CountD' datatype='string' name='[Team]' role='dimension' type='nominal' />
      <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
      <column aggregation='CountD' caption='Region' datatype='string' name='[region]' role='dimension' type='nominal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[Medal]' derivation='None' name='[none:Medal:nk]' pivot='key' type='nominal' />
      <column-instance column='[Season]' derivation='None' name='[none:Season:nk]' pivot='key' type='nominal' />
      <column-instance column='[Sex]' derivation='None' name='[none:Sex:nk]' pivot='key' type='nominal' />
      <column-instance column='[Sport]' derivation='None' name='[none:Sport:nk]' pivot='key' type='nominal' />
      <column-instance column='[region]' derivation='None' name='[none:region:nk]' pivot='key' type='nominal' />
      <group caption='Action (Medal,Region)' hidden='true' name='[Action (Medal,Region)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Medal]' />
          <groupfilter function='level-members' level='[region]' />
        </groupfilter>
      </group>
      <group name='[Set 1]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='crossjoin'>
          <groupfilter function='union'>
            <groupfilter function='member' level='[Medal]' member='&quot;Bronze&quot;' />
            <groupfilter function='member' level='[Medal]' member='&quot;Gold&quot;' />
            <groupfilter function='member' level='[Medal]' member='&quot;Silver&quot;' />
          </groupfilter>
          <groupfilter function='union'>
            <groupfilter function='member' level='[region]' member='&quot;France&quot;' />
            <groupfilter function='member' level='[region]' member='&quot;Germany&quot;' />
            <groupfilter function='member' level='[region]' member='&quot;Italy&quot;' />
            <groupfilter function='member' level='[region]' member='&quot;Russia&quot;' />
            <groupfilter function='member' level='[region]' member='&quot;UK&quot;' />
            <groupfilter function='member' level='[region]' member='&quot;USA&quot;' />
          </groupfilter>
        </groupfilter>
      </group>
      <drill-paths>
        <drill-path name='Country, City'>
          <field>[Country]</field>
          <field>[City]</field>
        </drill-path>
      </drill-paths>
      <layout dim-ordering='alphabetic' dim-percentage='0.735632' group-percentage='0.0402299' measure-ordering='alphabetic' measure-percentage='0.224138' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:region:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;USA&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>%null%</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Macedonia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Trinidad&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Virgin Islands, US&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Individual Olympic Athletes&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;North Korea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;UK&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Sex:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;F&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;M&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Medal:nk]' type='palette'>
            <map to='#9c755f'>
              <bucket>&quot;NA&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Silver&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bronze&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Gold&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Season:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Winter&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Summer&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Sport:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Basketball&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Handball&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Short Track Speed Skating&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Aeronautics&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Diving&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Racquets&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Triathlon&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Art Competitions&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Football&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Rugby&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Weightlifting&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bobsleigh&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Judo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Softball&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Basque Pelota&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Hockey&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Skeleton&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Athletics&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Freestyle Skiing&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Rugby Sevens&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Wrestling&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Curling&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Nordic Combined&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tennis&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Alpine Skiing&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Equestrianism&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Rhythmic Gymnastics&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tug-Of-War&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Croquet&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Modern Pentathlon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Table Tennis&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Badminton&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Golf&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sailing&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Boxing&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lacrosse&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Speed Skating&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Canoeing&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Luge&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Swimming&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cross Country Skiing&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Motorboating&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Taekwondo&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cycling&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Polo&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Trampolining&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Beach Volleyball&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ice Hockey&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ski Jumping&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Baseball&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Gymnastics&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Shooting&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Alpinism&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Fencing&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Roque&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Volleyball&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cricket&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Military Ski Patrol&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Synchronized Swimming&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Biathlon&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jeu De Paume&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Snowboarding&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>%all%</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Archery&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Figure Skating&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Rowing&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Water Polo&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <shared-views>
    <shared-view name='federated.1ac8rjf1w901u31exdi441g56pyo'>
      <datasources>
        <datasource caption='athlete_events-csv+ (Multiple Connections)' name='federated.1ac8rjf1w901u31exdi441g56pyo' />
      </datasources>
      <datasource-dependencies datasource='federated.1ac8rjf1w901u31exdi441g56pyo'>
        <column aggregation='CountD' datatype='string' name='[Medal]' role='dimension' type='nominal' />
        <column datatype='string' name='[Season]' role='dimension' type='nominal' />
        <column aggregation='CountD' datatype='string' name='[Sex]' role='dimension' type='nominal' />
        <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
        <column-instance column='[Medal]' derivation='None' name='[none:Medal:nk]' pivot='key' type='nominal' />
        <column-instance column='[Season]' derivation='None' name='[none:Season:nk]' pivot='key' type='nominal' />
        <column-instance column='[Sex]' derivation='None' name='[none:Sex:nk]' pivot='key' type='nominal' />
        <column-instance column='[Year]' derivation='Year' name='[yr:Year:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]'>
        <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
          <groupfilter function='member' level='[none:Medal:nk]' member='&quot;Bronze&quot;' />
          <groupfilter function='member' level='[none:Medal:nk]' member='&quot;Gold&quot;' />
          <groupfilter function='member' level='[none:Medal:nk]' member='&quot;Silver&quot;' />
        </groupfilter>
      </filter>
      <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]'>
        <groupfilter function='level-members' level='[none:Season:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]'>
        <groupfilter function='level-members' level='[none:Sex:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]'>
        <groupfilter function='level-members' level='[yr:Year:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
  </shared-views>
  <actions>
    <action caption='Highlight 1 (generated)' name='[Action1]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Sport with most medals' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Sport' />
        <param name='target' value='Sport with most medals' />
      </command>
    </action>
    <action caption='Filter 1 (generated)' name='[Action2]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Olympic Dashboard' type='sheet' worksheet='Olympic hosted cities' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Olympic Dashboard' />
      </command>
    </action>
    <action caption='Filter 2 (generated)' name='[Action3]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Olympic Dashboard' type='sheet' worksheet='Event count vs years' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Olympic Dashboard' />
      </command>
    </action>
    <action caption='Filter 3 (generated)' name='[Action4]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Olympic Dashboard' type='sheet' worksheet='Sport with most medals' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Olympic Dashboard' />
      </command>
    </action>
    <action caption='Filter 4 (generated)' name='[Action5]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Olympic Dashboard' type='sheet' worksheet='Teams with medals' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Olympic Dashboard' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Event count vs years'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Event count vs Years</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='athlete_events-csv+ (Multiple Connections)' name='federated.1ac8rjf1w901u31exdi441g56pyo' />
          </datasources>
          <datasource-dependencies datasource='federated.1ac8rjf1w901u31exdi441g56pyo'>
            <column aggregation='CountD' datatype='string' name='[Event]' role='dimension' type='nominal' />
            <column aggregation='CountD' datatype='string' name='[Medal]' role='dimension' type='nominal' />
            <column datatype='string' name='[Season]' role='dimension' type='nominal' />
            <column aggregation='CountD' datatype='string' name='[Sex]' role='dimension' type='nominal' />
            <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Event]' derivation='CountD' name='[ctd:Event:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Medal]' derivation='None' name='[none:Medal:nk]' pivot='key' type='nominal' />
            <column-instance column='[Season]' derivation='None' name='[none:Season:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sex]' derivation='None' name='[none:Sex:nk]' pivot='key' type='nominal' />
            <column aggregation='CountD' caption='Region' datatype='string' name='[region]' role='dimension' type='nominal' />
            <column-instance column='[Year]' derivation='Year-Trunc' name='[tyr:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Year]' derivation='Year' name='[yr:Year:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Medal,Region)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Medal]' />
              <groupfilter function='level-members' level='[region]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Medal,Region)]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1ac8rjf1w901u31exdi441g56pyo].[tyr:Year:qk]' scope='cols' value='Years' />
            <format attr='title' class='0' field='[federated.1ac8rjf1w901u31exdi441g56pyo].[ctd:Event:qk]' scope='rows' value='Sports events' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Season:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Year:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[tyr:Year:qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Number of Events:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[ctd:Event:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='line-interpolation' value='step' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ac8rjf1w901u31exdi441g56pyo].[ctd:Event:qk]</rows>
        <cols>[federated.1ac8rjf1w901u31exdi441g56pyo].[tyr:Year:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Olympic hosted cities'>
      <table>
        <view>
          <datasources>
            <datasource caption='athlete_events-csv+ (Multiple Connections)' name='federated.1ac8rjf1w901u31exdi441g56pyo' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ac8rjf1w901u31exdi441g56pyo'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <semantic-values semantic-role='[City].[Name]'>
                <semantic-value key='&quot;Athina&quot;' value='&quot;Athens&quot;' />
                <semantic-value key='&quot;Torino&quot;' value='&quot;Turin&quot;' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;Atlanta&quot;' value='33.753746' />
                <semantic-value key='&quot;Chamonix&quot;' value='45.923699999999997' />
                <semantic-value key='&quot;Cortina d&apos;Ampezzo&quot;' value='46.540500000000002' />
                <semantic-value key='&quot;Lake Placid&quot;' value='27.293099999999999' />
                <semantic-value key='&quot;Moskva&quot;' value='55.755800000000001' />
                <semantic-value key='&quot;Sankt Moritz&quot;' value='46.4908' />
                <semantic-value key='&quot;Sarajevo&quot;' value='43.856299999999997' />
                <semantic-value key='&quot;St. Louis&quot;' value='38.627003000000002' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;Atlanta&quot;' value='-84.386330000000001' />
                <semantic-value key='&quot;Chamonix&quot;' value='6.8693999999999997' />
                <semantic-value key='&quot;Cortina d&apos;Ampezzo&quot;' value='12.1357' />
                <semantic-value key='&quot;Lake Placid&quot;' value='-81.362846000000005' />
                <semantic-value key='&quot;Moskva&quot;' value='37.6173' />
                <semantic-value key='&quot;Sankt Moritz&quot;' value='9.8354999999999997' />
                <semantic-value key='&quot;Sarajevo&quot;' value='18.4131' />
                <semantic-value key='&quot;St. Louis&quot;' value='-90.199402000000006' />
              </semantic-values>
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Yugoslavia&quot;' value='&quot;Serbia&quot;' />
              </semantic-values>
            </column>
            <column aggregation='CountD' datatype='string' name='[Medal]' role='dimension' type='nominal' />
            <column datatype='string' name='[Season]' role='dimension' type='nominal' />
            <column aggregation='CountD' datatype='string' name='[Sex]' role='dimension' type='nominal' />
            <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Medal]' derivation='None' name='[none:Medal:nk]' pivot='key' type='nominal' />
            <column-instance column='[Season]' derivation='None' name='[none:Season:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sex]' derivation='None' name='[none:Sex:nk]' pivot='key' type='nominal' />
            <column aggregation='CountD' caption='Region' datatype='string' name='[region]' role='dimension' type='nominal' />
            <column-instance column='[Year]' derivation='Year' name='[yr:Year:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Medal,Region)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Medal]' />
              <groupfilter function='level-members' level='[region]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Medal,Region)]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='true' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='true' />
            <format attr='enabled' id='light_adm0_lbl' value='true' />
            <format attr='enabled' id='um_adm0_bnd' value='false' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='true' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]' />
              <lod column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Country:nk]' />
              <lod column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:City:nk]' />
              <lod column='[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]' />
              <geometry column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Geometry (generated)]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>City:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[none:City:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Country:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Country:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Year:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]&gt;</run>
                <run>Æ&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-family' value='Times New Roman' />
                <format attr='font-size' value='12' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-color' value='#4e79a7' />
                <format attr='size' value='2.9944751262664795' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ac8rjf1w901u31exdi441g56pyo].[Latitude (generated)]</rows>
        <cols>[federated.1ac8rjf1w901u31exdi441g56pyo].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Sport with most medals'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Top 10 sports medal count</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='athlete_events-csv+ (Multiple Connections)' name='federated.1ac8rjf1w901u31exdi441g56pyo' />
          </datasources>
          <datasource-dependencies datasource='federated.1ac8rjf1w901u31exdi441g56pyo'>
            <column aggregation='CountD' datatype='string' name='[Medal]' role='dimension' type='nominal' />
            <column aggregation='CountD' datatype='string' default-role='measure' default-type='quantitative' name='[Name]' role='dimension' type='nominal' />
            <column datatype='string' name='[Season]' role='dimension' type='nominal' />
            <column aggregation='CountD' datatype='string' name='[Sex]' role='dimension' type='nominal' />
            <column datatype='string' name='[Sport]' role='dimension' type='nominal' />
            <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Name]' derivation='Count' name='[cnt:Name:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Name]' derivation='CountD' name='[ctd:Name:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Medal]' derivation='None' name='[none:Medal:nk]' pivot='key' type='nominal' />
            <column-instance column='[Season]' derivation='None' name='[none:Season:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sex]' derivation='None' name='[none:Sex:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sport]' derivation='None' name='[none:Sport:nk]' pivot='key' type='nominal' />
            <column aggregation='CountD' caption='Region' datatype='string' name='[region]' role='dimension' type='nominal' />
            <column-instance column='[Year]' derivation='Year' name='[yr:Year:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Medal,Region)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Medal]' />
              <groupfilter function='level-members' level='[region]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sport:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Athletics&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Fencing&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Football&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Gymnastics&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Hockey&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Ice Hockey&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Rowing&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Sailing&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Swimming&quot;' />
              <groupfilter function='member' level='[none:Sport:nk]' member='&quot;Wrestling&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sport:nk]' direction='DESC' using='[federated.1ac8rjf1w901u31exdi441g56pyo].[ctd:Name:qk]' />
          <slices>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sport:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[Action (Medal,Region)]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1ac8rjf1w901u31exdi441g56pyo].[cnt:Name:qk]' scope='rows' value='Number of medals' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sport:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Sex:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Sport:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sport:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Athletes won medals:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[cnt:Name:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='shape' value='square' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ac8rjf1w901u31exdi441g56pyo].[cnt:Name:qk]</rows>
        <cols>([federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk] / [federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sport:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='Teams with medals'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Medal Table</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='athlete_events-csv+ (Multiple Connections)' name='federated.1ac8rjf1w901u31exdi441g56pyo' />
          </datasources>
          <datasource-dependencies datasource='federated.1ac8rjf1w901u31exdi441g56pyo'>
            <column aggregation='CountD' datatype='string' name='[Medal]' role='dimension' type='nominal' />
            <column aggregation='CountD' datatype='string' default-role='measure' default-type='quantitative' name='[Name]' role='dimension' type='nominal' />
            <column datatype='string' name='[Season]' role='dimension' type='nominal' />
            <column aggregation='CountD' datatype='string' name='[Sex]' role='dimension' type='nominal' />
            <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Name]' derivation='CountD' name='[ctd:Name:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Medal]' derivation='None' name='[none:Medal:nk]' pivot='key' type='nominal' />
            <column-instance column='[Season]' derivation='None' name='[none:Season:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sex]' derivation='None' name='[none:Sex:nk]' pivot='key' type='nominal' />
            <column-instance column='[region]' derivation='None' name='[none:region:nk]' pivot='key' type='nominal' />
            <column aggregation='CountD' caption='Region' datatype='string' name='[region]' role='dimension' type='nominal' />
            <column-instance column='[Year]' derivation='Year' name='[yr:Year:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <computed-sort column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:region:nk]' direction='DESC' using='[federated.1ac8rjf1w901u31exdi441g56pyo].[ctd:Name:qk]' />
          <slices>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]</column>
            <column>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1ac8rjf1w901u31exdi441g56pyo].[ctd:Name:qk]' scope='cols' value='Count of medals' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='vertical-align' id='refline0' value='top' />
            <format attr='wrap' id='refline0' value='on' />
            <format attr='text-align' id='refline0' value='right' />
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]' />
            </encodings>
            <reference-line axis-column='[federated.1ac8rjf1w901u31exdi441g56pyo].[ctd:Name:qk]' enable-instant-analytics='true' formula='sum' id='refline0' label-type='value' scope='per-cell' value-column='[federated.1ac8rjf1w901u31exdi441g56pyo].[ctd:Name:qk]' z-order='1' />
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Medal:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Country:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[none:region:nk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Count of Medals:&#9;</run>
                <run bold='true'>&lt;[federated.1ac8rjf1w901u31exdi441g56pyo].[ctd:Name:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.4722652435302734' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:region:nk]</rows>
        <cols>[federated.1ac8rjf1w901u31exdi441g56pyo].[ctd:Name:qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Olympic Dashboard'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontname='Tableau Light' fontsize='28'>Olympic Dashboard</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
        <style-rule element='table'>
          <format attr='background-color' value='#ffffff' />
        </style-rule>
        <style-rule element='dash-title'>
          <format attr='text-align' value='center' />
          <format attr='background-color' value='#00000000' />
        </style-rule>
      </style>
      <size sizing-mode='automatic' />
      <datasources>
        <datasource caption='athlete_events-csv+ (Multiple Connections)' name='federated.1ac8rjf1w901u31exdi441g56pyo' />
      </datasources>
      <datasource-dependencies datasource='federated.1ac8rjf1w901u31exdi441g56pyo'>
        <column aggregation='CountD' datatype='string' name='[Medal]' role='dimension' type='nominal' />
        <column datatype='string' name='[Season]' role='dimension' type='nominal' />
        <column aggregation='CountD' datatype='string' name='[Sex]' role='dimension' type='nominal' />
        <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
        <column-instance column='[Medal]' derivation='None' name='[none:Medal:nk]' pivot='key' type='nominal' />
        <column-instance column='[Season]' derivation='None' name='[none:Season:nk]' pivot='key' type='nominal' />
        <column-instance column='[Sex]' derivation='None' name='[none:Sex:nk]' pivot='key' type='nominal' />
        <column-instance column='[Year]' derivation='Year' name='[yr:Year:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='98142' id='15' param='vert' type='layout-flow' w='99034' x='483' y='929'>
            <zone fixed-size='131' h='16144' id='16' is-fixed='true' type='title' w='99034' x='483' y='929'>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
            <zone h='81998' id='5' param='horz' type='layout-flow' w='99034' x='483' y='17073'>
              <zone h='81998' id='3' type='layout-basic' w='89378' x='483' y='17073'>
                <zone h='40302' id='1' name='Olympic hosted cities' w='52738' x='483' y='17073'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='40302' id='7' name='Teams with medals' w='36640' x='53221' y='17073'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='41696' id='10' name='Event count vs years' w='33950' x='483' y='57375'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='41696' id='13' name='Sport with most medals' w='55428' x='34433' y='57375'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
              <zone fixed-size='160' h='81998' id='4' is-fixed='true' param='vert' type='layout-flow' w='9656' x='89861' y='17073'>
                <zone h='12195' id='11' name='Event count vs years' param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]' type='filter' values='relevant' w='9656' x='89861' y='17073'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='40070' id='6' name='Olympic hosted cities' param='[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]' type='filter' values='relevant' w='9656' x='89861' y='29268'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='17538' id='8' mode='checklist' name='Teams with medals' param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]' type='filter' values='relevant' w='9656' x='89861' y='69338'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone fixed-size='97' h='12195' id='19' is-fixed='true' mode='radiolist' name='Sport with most medals' param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]' type='filter' values='relevant' w='9656' x='89861' y='86876'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
        <zone h='16144' id='17' param='C:/Users/Nihar/Downloads/31tNlIYVx+L._AC_SS350_.jpg' type='bitmap' w='25148' x='10202' y='1858' />
        <zone h='17073' id='20' is-scaled='1' param='C:/Users/Nihar/Downloads/Capture.PNG' type='bitmap' w='15993' x='69403' y='232' />
      </zones>
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='Olympic hosted cities'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <tuple-selection>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[Longitude (generated)]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[Latitude (generated)]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:City:nk]</field>
                  <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Country:nk]</field>
                  <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]</field>
                  <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]</field>
                  <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[Geometry (generated)]</field>
                  <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[Latitude (generated)]</field>
                  <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[Longitude (generated)]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Sochi&quot;</value>
                <value>&quot;Russia&quot;</value>
                <value>&quot;Winter&quot;</value>
                <value>2014</value>
                <value>%null%</value>
                <value>43.600000000000001</value>
                <value>39.729999999999997</value>
              </tuple>
            </tuple-reference>
          </tuple-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[attr:Country:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[attr:Season:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Country:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Event:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Year:qk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[yr:Year:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{BFE1A2C4-CFFC-4E1E-B0B6-DB3BB0276708}' />
    </window>
    <window class='worksheet' name='Teams with medals'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:NOC:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:region:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{EE3AC946-8E77-41DD-8745-93BADCFC4996}' />
    </window>
    <window class='worksheet' name='Event count vs years'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sport:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[tyr:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{AC2A2407-5029-4B35-8903-0D5917671535}' />
    </window>
    <window class='worksheet' name='Sport with most medals'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sport:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Medal:nk]</field>
            <field>[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Sex:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1EA61130-C782-4C06-BAB9-996441A33EAE}' />
    </window>
    <window class='dashboard' maximized='true' name='Olympic Dashboard'>
      <viewpoints>
        <viewpoint name='Event count vs years'>
          <zoom type='entire-view' />
          <highlight field='[federated.1ac8rjf1w901u31exdi441g56pyo].[none:Season:nk]' type='highlight'>
            <bucket-selection />
          </highlight>
        </viewpoint>
        <viewpoint name='Olympic hosted cities'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Sport with most medals'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Teams with medals' />
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{462CD8CF-C32A-469A-9394-C470806512CD}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Event count vs years' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Olympic Dashboard' width='192'>
      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
      /OkAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Olympic hosted cities' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nOy9WWxkaXYm9t2IG3Fj3xcyuOZaa3eru6VuScCMxpYMD6QRLAPeMLAMGJbt
      BxvwmwA/GJAfbPjRjwbGhh68w4Ys2BgYM+OxRpYljafV3aXqqqyNlSSDZDD27ca+XT9Efyf/
      +/MGk7lUVSarDpAgMxhx4y7/cs53vvMdw7ZtJxAI4FmtXq8jFArBMAwAgOM4cBwH8/kcy+US
      gUAAPK7jOFgsFggEAlitVqjX6/D5fIjH4zAMA4vFAtFoFIvFApZlIRqNwnEcXF5eIhqNwjAM
      1/eMx2MEg0H4/X6MRiNsbW3JeTWbTViWBQBYrVaYzWaYTCZIJpNyjMVigU6ng0KhgPF4jFAo
      hNVqhfF4jHA4jGQy+cz3Y5M5joNPPvkE29vb8Pl8V/4GAIZhyO8AMJ/PEQwG5T38O8/f6zt4
      HC/r9/sYjUZyX8PhMDKZzAtf220wMxAIyIC5qXGQqw/UMAwsl0vMZjPE43GMRiN5iD6fD36/
      HwCwXC4Rj8cRDoexWq0wn8+xWq3g8/kQCAQwn8/lfLLZLOr1OhKJBPx+v2sQ+Hw+rFYrhEIh
      1/kvFguEQiF5j2masG0bgUAA8XgcjuPANE0Mh0N0Oh0MBgPs7e3BNE3EYjH0+31ks1k53xc1
      x3EwmUxkkKr3bLVayfWog1e9TvV6vY6tf1ZdKGic4IvFAoPBAOl0+pmf+W21q3f1BjabzbBY
      LDCfz12vD4dD7O/vo9/vIxaLuR6C4zhYrVYy0Liqz2Yzebj8Pz+XSCRw79492LbtWgl9Ph9m
      sxkuLi6QTqdd37FcLuXYhmGg2Wwim83CsizXgEmn00gmk7LD8POWZaFSqbjO/UWMxwwEAmg0
      Gq7X9YGrDnr1+59n5b+8vES/38dkMpHrTSQSSCaTSKVSL+XaboM91wSIRqO4d+8eHMfBdDqV
      1zk4F4sFWq0WDMPAdDrd+DC5HauvL5dLLJdL1/u3trYwHA7Rbrdh2zYymQwGgwFKpRIuLi5c
      A8Hv92O1WskAi8ViGI/HWK1WrmtIpVLw+/3IZrNPbsbPd5VOp4PHjx/j4uLCdS7PY3TvJpMJ
      Wq0Wjo+PZULrpk9yfWDTzVTPV7fJZILJZIJAIIDj42OMRiP5jN/vR71eh23bL3RNt8meawIA
      TwbmbDbDdDpFt9tFJpOBYRi4e/cufD4fKpUKOp3Oky9TVnr+DIVC4prQ9MFK3zUYDOLOnTty
      TLpv3W7X9R3D4RDj8RiO4yASicC27Ss7gz4R+f2RSAS5XA6VSgXBYBCVSuV5b5GcYzgcxmw2
      Q7FYxGAwQKVSubLaqzuC3++Xice/8fzUn8vlUmIideBbloVcLodvfetbME0T1WoVo9FInlmt
      Vnuua9En4G0w80U+zK11Pp9je3vbtYoDQKFQQCAQuPam6UEeXSXd9vf35ff5fI58Pg9g7d+q
      u9DOzg5OT0/Fler3++sLNc2NLoPujoRCIbz55puo1+sYj8eIxWJIpVIbXZHrzDAM7O7uYjqd
      4uzsDAcHBzg5OcFqtZI4w+fzybmtViv0+32YponFYoHxeIxIJCJxEt0/7nSLxQLb29vyXbx/
      /X4f8/kcjuMIILFarRCPx10u5U3NcRycnJwgGo2iUCg88314meY4DlqtFjqdDkzTRCKRwHA4
      RD6fdwEzN7FnmgBESVTzQkxM04TP58NyuRR3hKtTJBKRi1AviJZIJFCtVrG9vQ3LsiTWUL+X
      E4QXOp1OZYBwVYzH4zBNE9Fo9ErA7vP5EA6HMR6PZTCp5jgO/H4/TNNEIBDABx98gO3tbZRK
      JTn/Z7VqtYpgMAjDMGCaJiqVCnZ3d6+8j24cg3lOZK7ss9lMgIThcCjno+4oPp8P8/kctm2j
      VCphMpnITtjpdBCLxZ75/FerlcRNX5U5jiO7V6vVgs/nQ7/fR7fbhWma6Ha7SKVSKJVKMM2b
      De1ncoEeP36Mdrv91Pf5/X7s7u5iMpnA5/MhEokgn88jGo2iWq1iNpu5LkoPBiORCC4uLtBu
      tzGfzzEYDK4cXzXTNCXADAQCSCQSmEwmaDQaWC6XV96/Wq0wnU7RbrflhnohKblcDovFAvfv
      30cikcDFxYXn7vQ0m06nGI/HAm+mUimMx+Mr30cLBoNIJBKIRCIolUrI5XJIJpMIh8NIJBLY
      3t6We0p4l+flOA663S46nQ4CgQDOzs5kAhGNWywWz3wNfr//uXfBl2Wj0QiNRgMffvihgBqp
      VEog9Gw2i0gkgpOTkxsf89pp4jgO6vU6ms0mDg4OEIlE0Ov1kEqlYNs2bNv2XMWAJw+V/nkw
      GMR0OpWtnausFyzo9/uRTCZh2zZarRbu378v56P7xIRfu90uisUigPXADYfDKJfLqNfrsCxL
      oNFQKIRms4lgMIhoNIrZbIZOpyO4uB6wHxwcCJrU7/dxcXGB3d3dZx4IpmliuVyi1WohkUhc
      weH1QD4QCFyBNHnddJnUv6s7AAP8y8tL5HI5xGIxyb0Eg0GXu/qqW7VaxSeffIJMJoPJZILl
      col0Oo10Oo3Ly0skEgksl0sMh0PZCVKplIylp12nawJwYNLPrFarmEwmWCwWkpRarVYYjUYY
      jUayOrfbbfj9fuTzecH+l8slRqMRisWiPLBwOCyrEeDGrPUHOplMYNu2DFzHcVCpVLBcLpFK
      pdButxGPxyUZFgwGXat9NBrF3bt34ff7US6X0el0EAwG0Wg0EA6HMRgM0Gw2sbe3J0F8IpG4
      ctM4QXO5HCzLQrvd3jjpN9l0OkUoFEI4HEav18N8PsfJyQnefPNNV35DhT/Ve+G1i6nmtYvG
      YjHcvXsXpmnCMAwEg0G0Wi1EIpErbuyraovFArVaDcFgEMPhEPF4HJlMRsZYqVRCq9VCIBBA
      LpfDfD5Hr9dDIBCAbdvw+XzY3d2V93uZqa4un3/+Ofx+P2azmSSQDMPAzs4O/H6/3ORGoyGT
      hYkqwzBwfHyMUqmEaDSKYDAoJ8UTCAaDGyHRbrcr2dJ+v49yuYzt7W3Z2pfLJabTKQKBAB49
      eoRYLCaZ3mQyidFohA8//BAPHz6EZVkwDEO2ScdxUCqVMJvNxAWhe1av17Gzs4NyuYxgMHjt
      4BgMBpLse5ZEUiQSQa1Wk3sYjUaRTCZvlGxjzKBOEvXeqRNHnTzq54B1Njgajb4Wqz/h9U8+
      +QSr1QoPHjwQN48LBt/n9/sRj8cBrJ8PF8JMJoPLy0s0Gg3E43FhHejm/73f+70/oF/Ybrdl
      Fe/3+8jlctjb27uSsWRiJxwOIxQKySrJydNsNgVjZ7aXyTOuSOqqNR6P4fP5YNu2TJhsNgvb
      trG/v+/yaUOhEILBIHZ2dgTmtCxLVtfVaoVWqyX+Kt2XcDiMQCCA5XKJfr+P/f19+P1+NJtN
      5PN5TKdTiU1U90N9KAAkuIpGozd+oKR9EAoNhUI4PT0V2JjG810sFley7JvOhwPDK4bhT9u2
      EY/HUSwWX/nBv1gs8OjRIywWC/R6Pezv78Pn86HRaKDf78OyLBlDi8UCy+US4XAY8Xgc9Xod
      yWRSFuR4PI7lconBYIBOp4P5fI5IJOK6B2YsFkOv18NwOJQ/WJYFv9+PSCSC6XTq2pr5U+X5
      qD9jsRgsy5LEFR9OOBx2ZY4dx8FwOMR8PheIjrDecDiUlZZJNSJLlmUhEong7OwMwWAQo9EI
      Ozs7ACCzPJlM4uLiAnt7ezKYOKAikYgM9Ol0ip2dHcRiMYTDYYxGI9TrdZRKpSvbZqfTQafT
      wfe+970bIwyqBYNB5PN5DAYDAQnU1Uz393VoWH2Pal7uD40PPxKJuBJ+r7I9fvwYrVYLo9FI
      XFwakSyOC2A93gi1c5yZponVaoXlcinxn+OseWrlclnuPQD4f//3f/8PSCxLpVJyIH3LUB+I
      14QA1rM3FovJoA6FQrJi05djbLBarZDL5TAajbBcLjEej9HpdGAYBu7du4d0Oi1oSCqVQi6X
      w2AwwOXlJXw+H+7cuYNoNCr+NbPOXBEmkwkSiQR6vZ6Li9RsNhGLxRCLxRAMBtFsNpFKpRAK
      hRAIBNBsNlGtVpHL5VwrKV2jer0uEOuzrqaj0QiffPIJJpMJotGo6+HqA5cTnnYddWI2m8G2
      bUm4LZdLwfqLxeJXjt7c1GazGSqVCgKBAGazGba3t9HtdjEajWSnn06nAmAAa1CDYwqALJAq
      LQZ4Ai6YpolWqyX33wTcq7ialNHNi82o+6Jc5dW/dbtdwdCJZROmDAaDqFariMViuHfvHrrd
      Lmq1GpLJpAuZGQwG6PV6yOfzOD8/RywWw2AwkIfrOA4SiYTM/NVqhcvLS7TbbZRKJTnOarUS
      V4ABteM4uLi4EASB7hfRBF57JpNBs9nEp59+irt370qweVMjLWE4HCIYDMogvy5RqGeMvVwh
      LjD8jq2tLdy5c8eTKvGqWq/Xw+PHjxGPxyXfRNeNEC6wHuB6MM9YYDabiSdBDpRXlj0SieD8
      /ByZTOYJCqT6kfrAVrHv67Zkx3GE3KZOKsMwhH0Zi8UwHA4BQLJ3sVhMtuhMJiMJD0KHHKzj
      8RiBQADb29sYjUauwc/z4fYXDoeFDaqeezKZRKfTQTabRTAYFISBMQ0HKZNJuquXy+WwXC5R
      r9cxmUxw9+7dG6EqjrOmd3MXJBzKB6Rms1VGq/p5LzMMA4PBAAcHBy5i4Oto3/nOd4R6QrjT
      CyjYtJul02l0u11xeXnPyPHi53w+HxKJxBo25QGZWtc/zL/rA03P5Pp8PoRCIUwmE5imKQPP
      MIwrD4b+dTwex8cff4x4PH7FR00mk1ceejKZxHK5lIAmkUh4ng93Il6o+nfLstDv910BqGma
      snpks1lJgJ2dnckEUL+H7uJsNsPR0ZEgT9cZ3ZJkMon5fI5YLCarFIEFns9kMtl4HP06V6sV
      LMt67Qc/n22/30ckEkEkErky+NXnyMXJC1X0Wiy83PlYLObOBNM14QPw2n51qM0wDNmeAoGA
      rMrMH+hfrpppmrh79y6Gw+G13Hj+VAcfOT7qRamfp4/HAIjBPGkR6ncwQM3n8zIRh8OhJI54
      fep26jjruoJwOIyf/vSnqNfr17oyy+USwWAQmUxGYFuiaOrg94qt9OtTrd/v3xp6c6fTEaiT
      lBbVeP/5TFWjl8HYwHEclMtlF23GK4aSCRAMBuVhcDB6zS7Vr1KhwWg0ing8Lm4FM3RcWblL
      6IOcQYte8MKLUN/Pz3PiXGeGsU7+zOdzzOdzXF5eSuJub2/vyntZpMNJwkRbJBKR6wLWq7O6
      U6bTaRweHqLZbIpr52WWZaFQKGAwGAil28vU++r1u3p/mI/Q3aVNxhhINw42vb7jy7TJZIJe
      r4ft7W0sFgt5FjSVSRyJRDbukvoi2Gw20e125RqveC78RT2A/ka+R30IpmkiEokgmUwKokIL
      h8OIRqMCp06nU6E36DOR2Tr95PmTA59JNC8YdtP5jkYjdLtd9Pt9CYqJK28yx3FwdnYmBT1E
      ZMLhMJbLJY6Pj9Fqta4gYkSfrjPbtjEajVAqla5QwNV76xVbARC3jMcijHtTG41G+NGPfoR2
      uy3fN5lMMJvNMBgM8OjRI5TL5Rsf72XayckJYrGY1JF0Oh3haw0GA5yfn6Pf76PdbqPT6cgE
      Ue9XNBoVVgBdb5/PJy7tYDDAYDCQyd7tdr3JcD6fD71e76noBAfZdDrFYrGAYRjCWlRXfQaa
      /HIGqLRNNcleu8TT4Lx2uy04P5Mei8UCfr9/HfU/BcMniqS6PZxEg8EAyWQSBwcHODs7kxV/
      uVyiUCg8NbNrWZYk8FRC4KZr1691MplgOBzi4uICgUAA+/v7N4Y3l8ulTOxer4dOp4P33nsP
      x8fHODo6QqPRwO7uruRdvmwjBZzu82w2Q7fbRa/Xk9oOghWGYcgkVo33IhgMIhKJwDRN5HI5
      1Ot1FItFHBwcYGtrC/P5HKZpYmdn5yoZjj5WIBDAYrFwreyq/7tYLMTHZ3aO9AhSeNWVPBKJ
      SLKNuDoRFy94TzXGJl4XqyNSpmlKIMULHY1GKBQKruJ51ZbLJSaTieDozF5z4vL8WF1GX548
      pPl8fqMgNJvNygoej8fFlVKvg7+r/+ciEwgEkE6nkcvlXHmKmxhhUsuyJM7L5XIIhUKuiRuP
      xyXrTpDhi7Z6vS6xo16lpxpd2YODA0ynUyFmqsZEKuMrsm7VxXRrawuOs6b+SB5Adws4IFRT
      WYh8eMFgUCYLM7mEndQJ4/f7kU6nJWnBBNhNsGovv3UTFMuCD2ZcLctCNpvFZDJBt9tFNpu9
      EmeUy2WBEy3LEp6Oz+dDNBqVEkK6cc1mE7u7uzg6OsJ0OsW77757o8HIUk6udOQqecVb/P9q
      tcJgMEChUHihbO729jYymQyq1SoCgQCCwaCrTprG5zQYDL6UCUAmJ2s51GvXF1HbtvH2228j
      GAxiNpvJAuoFmozHYxfsyQB7Nptha2tLJpvPa/ADEDxdPxE9MCOTcj6fYzqdijukfpY7xnA4
      lDwBL3gymUgGd5P5/X4ZzLwZqv+t3zDCqlxlo9Eo0uk0xuMxzs7OXBOK5xOPx5FOpzEajSTQ
      ZbJKHagMwMrlMu7du/fUYFy3dDqN4XAoLqaKsOkoBQBZ+V9UxmS5XOKzzz4TaoQ++dR/Xyay
      xBppTjomFr0GtmVZ4pEMBgNPN9JrMjAfxN3g5OQErVZrTYj0OoBhGFKNREkPPRmmfhEzb3SJ
      iLzoQQqPw1S2ZVlIpVISYHJr1icFER3hbyh8eZ0IxvO0bRu5XM7FCycl+fLyUt5PKRbeEFI5
      ms0mxuMx+v2+XBdvKLPQg8HApSpxE+OxyZPSg3j9JwfFs3yHl5mmiW9961t48OCBQMg66EBB
      ABbjfNE2Ho8xHo8lJ6M+T30xUFGq1WqFbreLfD4Pw1gnN7k4ki6hWigUElYoXVhqUJmqO6Nb
      JBIRRQUOPv1BbEIs1EHPC1DzBURXCOPZtu2aZNxdyFRVq5iIQpEaHY/HkUql4PP5UKvVEI1G
      kc1m0e/35bwXi4WIeU2nU8zncxwcHEiyLJlMCnrgOGtqhL7CqO5CNpsVXtGzaAglk0nhEl13
      r/gzFou9sDKFakRXJpOJ6AU5jiOr48HBwUZQ4mUZPYLz83OBzVlpuEn/yLZtbG9vY7lc4vz8
      3MVVI00dgJS6qonJaDQK0zTRbrdFoSMSiax3eGBzogpYzx4WI+jB2aZcAWMDL6zWMAzZIQBI
      7YHubtFN4gWppmoS7e/vYzQa4fz8HIZh4M6dO1K3SkhvNBphNpvh4cOH6PV64ofz5k2nU5TL
      ZTx48EDOsVgsolKpiKrcYrFAo9FAJBIRoa7z83MUCgXho9/EmMhrt9suRMorplksFuh2uxuD
      9+exbDaLTCaDfr8vwe5sNkOpVLqCvX8R5jgOzs/PcXJyIrFIOBwWVqfX+3u9HsLhsBQ3WZbl
      ikeJQJqmKQlPGikuzCEtFgsZy4ZhPJkAm4JK1ddWt0yvyaBuX5yB6iTgZ+geqRfgdeH0+fQJ
      oK+U0WgU0WgUvV7PVbS9v78vFNhSqYRAIIBYLIZcLue61tlsdiU5FggEUCgUhJvCSb1YLNBs
      NpFMJlEqlZ6rwLxQKOD8/Nx1v/RdgLvyYrGQ830ZxkGWzWaRzWalSOiLHvjAk8F8dnaG/f19
      cbNYrOMFCPR6Panq+slPfiI5J3oQarWc46zFELrdrmSFA4GAwKgAriw6G0Fx9STUL/QyfYIs
      l0v0ej0AkDoAsvQASMXYarUSzR71WDTV9XGcNduTgbZ6fuPxGI1G48ogBtYP/N69e1gsFvj4
      44/hOA4ODw/l5kejURddmPXFmUxGdEIfP36MXC4nLFHy7G+Sl/CyYDCIN998E6PRSBYKunwq
      +lOr1fDWW2898/FvYios+GVZt9vF+++/j52dHQEovAJ//qR+K/NK5FFZloXLy0uhQs9mM9kB
      VqsVtra2ZPxRE3W5XHpmuk11JfcKPID1IFIDvusSZOpnDWMtdUhahG3bApsOBgOZFHrkzv/P
      53NJNhnGmuvBQad+ToXHNhm3xnw+L25VuVzG3bt30Wq1RHnC7/dLcLa9vY1sNotkMonBYIBu
      tyvFO6VSSZIxzzMJwuEwWq2W4PIAhHfEa8vlcs9UefZl2HQ6xaNHj/DOO+9ce791Oz4+Rr/f
      x9tvv+2KJ9WBq1Jl1NwL3+vz+STgjcViiEajkhxjgAusJ47qCVB3VtVo5XdIxLHpIXIws8hE
      fa/XRNBnMV0eEuUikQgGg4EwItWs8NMmFnFc9fiNRkMK1q8biJFIBA8ePJAEErFnQqysG6Vy
      smmaODo6guM4koA6PDxEOp2GYRioVqtP/c7rjA+x1+sJGKAr513HCv2qzDAMbG9vP1OgTPr4
      3t6eZ02JFwxMES91PNENnc/nkqtJJBIi9stnm0qlrrg6alGUar6nrWDqhy3LEn9qEw6v/mPx
      gSpXzsEPrANQXbfTa3Jtmmir1crl019nhmG4bkAmk0GpVHKVS6rXRaqtqqPJeOPw8BCZTOZK
      bPKslsvlcHFx4fp+lYj4ZWVin8VImnyWic/rqVQqIs7V7Xbxs48+xz/6859KPbqe/dbjK11G
      Rz8v1otks1mBjolwsTySJkGw14WoA1p9OBxALGIH4EpOqbOZJ0zIkxk/dbAzGObn9e1PvYHE
      69XXWf30PKsws7xMzqm+N68tn8+j1WqhUqkgFou5YoxUKvXCySK/34/vf//7+OijjwTVODg4
      gOOseS+vKsd/03VT90lfaRmQkmIyHo9RLBbxD//ZX6C/sLCTDiEaXdct89mzPkU/vkqCA56M
      O8roMFseCAQki88ck1fi0dQRIC9YU/2duv6GYcgWzYGvF9KoAav+xfrxeRya3+936QhZluVZ
      bvmiQRzrRGnMUPNaKKESDAZFjp01p+VyGQcHBy/0/eFwWALdWq2Gy8tLbG9vYzqdfinJqJdl
      y+USP/3pT/H973//ygRgvPP222/LvXYcB7/7Wz9AtdbEO++86UrOcbW+uLjA1taWSGQOh0NB
      xex2A+3P/gLxe78Cf8ASGguBk0AgICWnVAJUF3SayayZ6rbQdNdD3xEo3qqu3Op7NhG91N85
      29XtH4BIXgDuTi+qvUjChgE4s8NEudR7wEnLmxiPx4V7P51OcXl5iUKh8EJCU4ZhyEA/ODjA
      Z599hvfffx+FQuG51Ce+KqPL5vVMOBDJpqVV6h38gx9fwAFwd/9J3TbvfzabRaVSQTKZRKVS
      QbFYRLVaxWKxQP+j/wtvDf4Utfwd7LzzQ0HNTk5OcOfOHUEu9QVdnSQAYFI9gVIkZNFt8rtV
      94iDQX19Op3KqvzRRx8JikIlBJKsOp2ObPGPHj3CG2+8Adu2USwWZSKpfpthGIKScJV4WtB8
      ndVqNQl2yfxUr03dsVihpPrkbLxRr9efiZZ8nfl8Pjx8+BD7+/s3LnJ5Fcxx1tVxb7zxxsb3
      pNPpKwvFarUGSKazuSQT1bH0+f/9h7C7Ldz5t/5AkoEU9jqxAnjvwxQOsvtC747H49jf33et
      +PqqryJBhmHA5/f7UavVxH/rdrs3Ckr1BI7uy7Oqp1AoYDKZ4OjoSIRaz8/PMZ1O8dFHH+Gz
      zz5DJBKRrOf5+bnnVgXAhbvTVXley+VyIgDG4+nXrH7X6empcEyoUsfrfJlojWEYX0pG9mXZ
      arXCX/7lX0peZJMFAgEpduEg3yum8Lu/8SYOdwou4MEw1mwB4/yfItt/H+PxSD7X6XRwdHSE
      YDiKb/+N30YymZKMcjQavfIc9XGk021MVsuQQmxZlojF6kGpni/wcpHUjNt0OkW1WhV+djAY
      RLFYhG3b6Pf7ksgYj8ei8ajSkIk46SoTvKjZbIZPP/0Ue3t7z+yG8Ga3Wi2JNfRr4bVOp1Pk
      cjmcn5/LNszdoNfroVwu4+HDh6/NoH1RI2jQaDTgOGt1vqflK/L5vCsja9u2yOAsFgskEglx
      SxaLxVpX9nf+i59j/Ot77ThrtRCKCwDr50NCne7u0K1WJ4Hf75extVgsYEwmE8cwDHz44YeS
      4dza2kI0GnVp+es4rfq6OjjVJneqqcjQcrkU/gZdGnW7YpHGYDBwXYhXjoEPhE0intUcxxH1
      Bx0mU7+Lr3W7XSSTSfh8PozHY/j9fkwmE5F/v+22Wq3wox/9CKVSSfoTxGKxp9K1HWctCzMa
      jeD3+1EqlYS5+ejRI9y5cweO44iKeKfTwb1790RWMxqNYj6f4+LiAtlsFkdHR64sPpXkAIiO
      kBqfqs8xHo9L1ZkPWGOolItjlpTbvT7A9VmmN6vwunD68yyY4e/8LHV8uCqToaj6wZwY6jHV
      7fJZ4wFi/IZhiEK0fs7q/zkBmQjj+U2nU8TjcXz44YcvFJO8LkaXsVqtIpPJoNFowLZtHB8f
      X+uSGoaBUqmE+/fv486dO7AsS6rUMpmMfJa7CyfCp59+Ks+ddRqGsc7oUweoXq9fgdcpfkxT
      x0y/35eEqryDxChKo8/ncykm5wHUg9HUFVyHUfUbwM/qsiREWbgFTqdTEabiSZPY5AXNklp7
      cnKCer1+Y3UDtWSO5Zz6sdVzVP/Gf7yWRCLx1Drf22AspRwMBiJRyYztTZXoRqMRPvjgAwyH
      Q1SrVVnd1YXn4uIC8/lc9EHpriaTSTQaDdF9yuVyUufrtXBtctdpLirEd77zHSlEqVarUnVD
      v/y6FU6dBM9qjNrVY/n9frkouibUf9SN3VOoBnx8fOxqzudljuNIF0VCnF6untc18T6obhkV
      KG67FQoFWZF5j8nmvOmzbzabsspTdoYZd8dZZ27Zwpa94VRBY4okqDuOyqzVPRb9dfV31wSw
      LAv7+/uyfVDDpt/vuwaCPkBUN0j98k22aTdRX+PkM4w1oU7PIqvG1YduFYthWq3Wxs+Q38+i
      dqq0hUKhKwmoTdfEANlx1jRcql7cZvP5fMjn85LRnU6noqv6LNfO3g90RenesLsdD1oAACAA
      SURBVLnfW2+95RpnbMwCPCl8p1IHlTyazaYr8ap7GoZh4Oz9P8X5+3/6ZAdXT4p+WjqdRiaT
      kcopvUeXbmoQq68CavG1GjPworxuMC/yWYy7CFcnljaenp6i1+tdyRuYponvfve72Nvbc6lV
      jMdjV7G1uq16xUB0yzKZDHw+3416qL3ORlpBNBoVduwbb7wh8iU3MQ7Yer2OVqslbFwCDHfu
      3LnyGfaAINyZSqUE+Wm328jlclL3rTYkp5G5EDr6P2B8/L89SYTpbzRNEwcHB3j//fcRDAYx
      GAyE/OQloMv/60Xw/LuK9gDuBndq/MBa4UgkIjsOb7geZ+jmOI6U+Kl/Zzqcvcb42u7urpwP
      FePUVZ9lknr2mcgCOeaqvj8A6cXV6XRQLBZfSi3vq2StVkvyNtwFyKqNx+Po9Xo3om9sbW3h
      6OhIOGWTyQRvvfWW1FoDT1whZpZbrZbUZxOF4w5MDSAAEiPQ1IUsFAqh/8P/EEE4T7ruTCYT
      R4ctCYcahoHT01ORFhG/yefzHIyO40iFEeCNDKkDG7haoaOuupT+e1oyTq0B1WMV3XVjYz+f
      z4ezszMRz9JpG6o7F4vFpIOMbdvCBWJandCuep7kDan9jV9XI4uXSE8+n0e73XbJx5NNwH4O
      m4xQcrlcFqVwytpzcZpMJiLfQp0mwzBEp4nxHqV1qOLH+89OMps0RHkewDVdIsmAzOVyKJfL
      iMfjruqlTYiPOoC8AhP1Per/1fcRKVJPmLRlSq5QrrDf74sboroo6qBXz1fdxZLJJHq9HhKJ
      hGQR5/O57FpcoVjPMJvNJFmn0rxZ0G8YhkieMD/Anel1tuFwiM8++wxbW1vif4dCIaRSKViW
      hcePH8s9JFKzafGjexkOh4VoSKXvRqMhzFFKx3MQ05sg9ElmqRd4kUwmUa1Wkc1mn9qo3XMC
      UEfFcRwZJB988AG++93veibEVKMamxdypA5s9TX1d/3YLGoGIMkxrgrMLKpN5PRj6ZOVODBX
      cSpeMIDmP04CulfqRGSJJ8WZAHd9cTqdRigUQrvdRrlcfq5M9atk5GD5fD7prsNOLZVKxZVA
      DIVC6Pf7LtKb46zpL3x2aptYNYFZKBQEUVKNY47uUCQSkV4LTJINh0NBh8bjMWKxGBqNhnCH
      9MpDmidwaxiGpPzD4TB+6Zd+CZZloVqtemLlKi7Om6MHjwCurOpeu4L+k5OJQQvdK/rn16EP
      +o7AVaRcLqPdbgsBjr4sC3SYE1Cvi8chbYQ6nWxFxH+pVErOkXSSlylr8lWYZVnSjFq9VrqF
      akNCn8+HSqXi0l46/ewRTj74p5ItV314WvPkA5z+6X+L1WIuxyBKRDhcBU1UpgK7DrGnHRHM
      QqHgiVyqttEFisfj2N3dRa1WQ7FYxL179/DRRx/BMAyXTId+YMKprCHWA0X9vbp7pP9/PB7D
      NE1MJhP4/X5RMFguly42KnB1B/GCL1nYns/nYdu2uFTqzuaFaPF3tbCDSUMiTOr7GRM8b2f2
      V8kYgKbTaUynUwyHQ2xtbcHn87nkFfnscrmcaKo6joP+j/57HI6PUN99ANO6GiQ7jgP787/E
      Tv+vcFp9F8XtEnq9nqzcDIgpjrZcLrG/v+/yKA4PD8W1IqxNfhl1mFTjs9o4AQzDEK12/n5+
      fi5qXDxx9cHzd9bYkitiGAa6vR7iioiUl4ui++0AxB0Jh8Myu6k5tMnPVD/vNcnC4TCq1aoM
      Xq9JrE8kdh+0bVu6u5BKrt5Q9bwHg4HUTLzOTSxIX+n1etLLzTAM/OxnP0M4HMZwOEQsFkO3
      3cLl//6fYJx8A9/7l/8jAGvh25NhCI3Yr2DLMF3xgbrwFH/4r6Pb/BvYye1itVrh4cOHggDy
      GZG6bts2ms2mKItwh+XYGI1GSKfT4v+z/a+XXVtxofpdhmHg8PAQ3W4XqVTq2t5N6mo5Go1Q
      b3Xx3/3jj/G9Oyn81t/6vuszegCsD17OfvrQ7Kyid4jxOpdNOw/FfCeTiXB7VCMdWfXv1YIZ
      wzCkbkKPL7j98jjsXfw6GyFdXdb+7bffxueff64sCmOEZ010e+s+bL1eDyef/DV+1fdjfDD9
      BUSiUVxcXEhwq/LB1nBmQqBUihUAcLm5zAMQ/QGeJGMJYFB2k3+jOK5XiemNS47m87l0iGeE
      rUfZejQOrIMiHxzkYj4UMrErKI0OP6qDlnXAbLIRi8UwGo1cWkHX7QL6/9WCc7pPegUTb5hK
      u6AfqpZKspif/1dFW4PBILa2tnB8fCzaQq+76YHparXCycmJJDpt24Y/YCHzb/zXOEwkhCuU
      3jrA57O/g+2738dwOJRKN1aJsWyWLGLDWDc2Z8CtQ5lclJmLodEd02Fzx3GkcImLpkttwisP
      sMmGwyFOT0+RTCZRq9Xg8/mQSqfh9/mudOBWT1qybkpvXfU1ffCrOwJzAcATKjUAyUaqASYv
      mJwgNTPpBbXOZjMXRMkJ4lWQTZtOp1itVkgkEhiNRqjVatje3paJE41GEQ6HpblDo9HAnTt3
      RNHsOgTtdbJutyuqzmpfXtM0pYMmV+jLy0tpns4aatX9oTupcvyZ9KIWkOo2cTX3cqGZT1D/
      r9YFU4yN/Q+eaQIAEIpqKpVCpVLB//qnHyMSieDf/Z1f2SiURFUI9e8cuF6dAFXISk2sqSv7
      aDQS9WdVahGAbK8qO9PLJVLLN3XXSzdi2IvFQiRRKBPT7XYRjUbl4TqOg5OTE8Tjcdk5l8sl
      SqUSisXiTW7za2WLxQInJydYLpdPBAymY1Te/xMc/OK/iFB4XQpL+DmRSFyBw1utlgxqFbFj
      0Q1zPfP5HJlMxpVsdRwHnU4Hpmmi2WyK1mi320UoFJLcQ7FYlOKn5XKJRqNxcxeIZlkW3n77
      bZyenqJQKCAZ/hRBc+GiE/MnB6DaYI7GwaxTl9WVmauw+jkOWp/PJwNL7RxuGAYuLi7QbDal
      A4oXrsyfN3WhqEBM94jllOwuqV5HrVaTPEggEMDOzo4Ew7fJbNtGr9eTctpgMCir/sn/+z/j
      W7X/AR/4A3jjV39bhMfY94tB6WQ8Ru3iBPv33sTZ2ZmADUw6sqk5WbuA25PgWKMEys7OjjR3
      4cShwraOWBmG8ewTAFiv2gcHB3jvvffwt3/lLUk86IgLV3evkkOehGp8jxevR80L6DvWYDBA
      o9EQCnW5XMa3v/1tKdjo9/tX+gWreLZ6LnRl1POdz+ey7VJij1RgFsSrTfsov61OpNVqJepo
      zyKn/iobu/14da7Z/t5v4tEHYex+62+6XnccR4RwHcfB8Z/9j3g4+DP8rP1v443v/FDcxE6n
      I/UaHA+kQlDVmogPny9jMR7Dq9CeRsbzc+tu+Hw+kQRRcW4vP558GR3q1M0Ld9dPnHEAcV2q
      w7GSbWdnB7u7u9LwwnHWMht0pVSfUT+2PoH5XjaX48BWJyDPk/XCTNxRtJUtV7lDnp+fv7CW
      0KtiTGg1Gg2YpolYLCY+dypbQPJv/mtXYPJmsylBc7PZwh+9N8RhoITv3Eu6KC22bctKz4Ti
      YrGAaZrIZDLi0zPrbhiGZObVrLs+3larlUjT53K5558AXPXo9+mDSfXHqYKsdqO/Ljmmfl43
      DmYqRDBmqFQqci7klBcKBUQiEZydnUmfXjVgUoVo1e+mjUYjtNttEWJlUzz+v9VqodlsIp1O
      o1gsotFoXFGQu7i4QCwWQzqdxsXFxa1AhGiGsa6Ei8fj+OSTT2BZFprNJiKRyBUlP7WCKxgM
      4rh8gT/+fz5EZxnB5erbiFR6eOvttYIz8w2cUBwLTMYRqCDwEolE5Dm0220RHFaZqSrBk5ll
      wzCePQhWbTAY4OLiQrjwKnJD6JBkJS9SmJeLYxhrxqbXKktj2puvq51kVCSHUOZ4PEa1WkU8
      HhduEbs8MqGmdoQfDgao1WpIplJIp9OikrFarYS96DhrViMhu4ODA8l+buob5tWl/rbYdDrF
      0dGRDH5m2dPptNBG/vrjE5xWO/j1H7yJn350gj957OA3HvjxuDFDMBDAb//yIba2tgRiTqfT
      8Pv9sqCFw2FJPOqua7vdFreGXWCYQON5lEolOI6Dn/3sZ9jb24PjXNMf4KbGCnuV56O2GmKS
      QocceRFePjgHsNf7vHYGBjjcFbiFsptjt9tFsVjEarUSmcN2uy09ABzHEel1ADj/+/85EsYQ
      1m/+ZxiNRq5rI/zKwguuSLVaDY7joFQqbbxXt8X39zLLshAIBGQCMJm4Wq0QiUTwkw8+w99/
      v4vAYoDScRW/+c/9EO/cv8BbbzxAp9PFZDrBfDZDp9MRFXFyrfL5vJDdOBZUAEN3WSnwUC6X
      sVwuZULUajUsFgsJwJ87CKaxvdF1dF8OZvK36atvokSon+HF6skyr8YK+udt25ZuISzg6Ha7
      2N7exuXlJUzTxOXlJXZ3d2EYaxLfbDZbF+Pk3sJgMUDg543/CoWCHJc+PWskGFdEImtx19eZ
      9fmipqrrAW407WenXeSsGQLhIN67BH4wHOE733oHAJBMJrAd2UK73Uaz2ZQcAOO3breLQqGA
      Wq2GRCLhCaqk02mp7ebY2traQrlcls6ljrMm8Kl5hReaAKQ+qxcMuEsk1dcJb3FVUBEXFf9X
      YU91oG9SHSAyoyJH0WgUuVwOrVZLCi7oIsViMRHuIrmr2+0KupX95/9N0ZRR/c9ut4uDgwMJ
      cIlo0AUE4GrZcxttU/YdeMLFAa66rb/7mz/AZDpFo9lCs2MjYPpxdnYmNGsS7KhMEolEUG20
      8efvfY5ffncPBazV/CqVCvL5vCy6ZAWHQiHEYjEXUTMYDCKZTCIUCgkixNxCrVZHfzh+sQlA
      FV7V1FVYD3a9Yg11Ndfp0uox9eSY/iCYEOMD8Pl8shoz8PH7/ajX64hGo4LqnJ6eipAqGyzo
      qfdOp4NsNitdJSeTiRAD9aD2tk4Ax1nLkvR6PcnREKUh/KjSyGnD4XBdchq2kE4lEA1b+MXv
      5qRjEIPVTqeD8XiMe/fu4eTkBGdnZ/io3MYnTWC/3sHdwwNRdWPTQ5bRJhIJNJtNV6srmk6C
      M00TW1tb+ON/8tf4Wdl+8R1ArxdWXRrVvNAdrzwA4Szd+B2AWySLk0yXVuHFqg+IwVkwGBSy
      ViKRQC6Xk6SJmsTjLrG9ve1q1hAKhXD//n3Pe/IsbYNeJ6NCCAeZutuz/xb1XQEIHh8KhbC7
      uysKDoeHh/D7/eh0OsLjj0ajiMfjAjbs7OxgOBzibjGKrYSJe3f3cXx8jHQ6LQk33Q0Kh8M3
      zrIbhoFf+fY9RKzTF5sAqniVHsQCEFkTfWIsFgvPuIER+2w2w2w2k6oh0pAnkwkymYyoOJCQ
      dXh4KBOBLVDVVqo8dqVSwXg8xnA4lKCXviPPl4G0l1ju19lisRiOj4+FxKa2dPL51h2EWDdO
      hKxWvcTB4R0YxrqZNXfL1WqF8/Nz7O3twbIsHP3kTxA4/3PEfvnfQaVSQTqdxre//W0sFgtU
      KhWhUIxGa5FcNetPbo+XTadTQQJDoZDLRf6Fdx7gF9558GITgAUKqs+vcnfU1peTyQSpVArd
      Xh+9vn2l/Y2KGJG7wXpRtsNsNBoIBAI4Pz+XnmWj0UiysY7jiK6oYawL+okmqO6VaZrIZrNy
      fqoRbWAjv36/D8MwcPfu3Rsrn91G48BzHEcGIlEZ3XU1DAODR/8Q0cs/xyz/nwIeXHweLxAI
      ILKyEZueot1tIZFe16AfHh4iHA5jf38fJycnmM/nKBaLmE6nMg5M00Sv10M2m8V8Pnc1Lq/X
      69INnlwhv98vTRI5Ll9oApB5p148O66oCA5Rnfl8jr/3x3+B6XyJf/9fCksLJeDJzuHz+dBs
      NmV13t3dRblchuOsWZ4+n08SIsPhUIokmGBjUM4Gavy73+/H7u6ufI86Kfj9/Nzjx48xn89x
      9+5d3L171wW5fZ2NvJrpdIput4t0Oi3uTywWE+St1+shmCxi3ttGNH61EKhSqSAUCqHb7SKf
      z+Ph3/q7aL/7LyC/XOdZisUi6vW6iOjyu2u1GqLRKLLZLFqtlstlZuNyIjxsfEKzLEu0iFQv
      5YXzAJuCPp1WAKwnzINSCrPFUpiSXnzvd955Ry6M2LrK3WFLIabIyQnhzN6URabRDdPPl6WN
      Ozs7ODg4+GbQK8bdWV3xz87ORIdnZ2cHs9lMci6J+/8KJpO/g9lsJjkXWiAQQCgUkmcQCARQ
      3F4PdNu2RfWBEp1E8Fg0P5vNcOfOHXS7XUl4OY7jWt15zuozJBwP3KAk8ia2tbWFk5MTpFIp
      z0Gnw6CGYeA3f+178jt9dH2isOaAJ8yMXqvVQj6flxI9x3miCGFZFvq9LmYjG9mt3SvnQvUH
      AELN6HQ6EsOwFzClFb8Z/G7rdruy0BjGWjQhk8nAsizk83mJwUhMm81mou2jQpMApFbDqwtm
      LBZDv9/HcrmU2G40GuH8/FzyNayySyaTqNfrMAzDRcjjc0wkEusOND9nEBO5okv9QmQ4wL3K
      8ydnrhobqO/3Mn2ijMdj5HI5nJycIBQKYTgciiJwKBTC6empDPxcLodcLgefz4fWX/0Rir1/
      huoP/mPkiiVZqUiVmM/nmM/niEaj8vlQKATTNNFoNAR/vknb1VfdqK73srhHVPogxweA1OSq
      uyeru4bDIQ4PDz2PxXoKtU6aixwhTgbWrAwLBAJSKH/08QdoXx7jF374ay7aPM00TZk0wWBQ
      kD+KNdy/f1/G5gtPgFKpJI3M6HupFfxepmcLVf/fcRzJ4CUSCQSDQXzyySdwHEfoyN1uFzs7
      O4jH4zg9PZUBG979FqrzIbbSWYxGI4kHWGOq+vkMrlX9I9Y43IbVPxaLyf2sVqvP3U6WViwW
      ZUGi6S4GFy42Ft9kRGRos9kMn3/+uQgfzGYzvPHGG1dAh263C9M0Ef/Z30PS18XZ1h8KEU61
      cDgsbbeI+3NxZlJU6BQvQoajVSoVKf74q/c/Rb07wK/94puwlEmga/g4jnc3Ga4CgUBATpQJ
      D5LXTNOUv3FmMwhWKbE6Jq/CpAAkG83zGw6HePjw4Qvdi9tqjuPg008/FXeT7osqW0I6CAcu
      czMkL7LfBImKbI2USqWkgfZkMsGDBw+uLJ6Os5abXCwWePyjfwDfpI3IG7+Ovb09tNtthEIh
      oWezQEel0DiOI2xhukSTyeTlTID5fC4B0X/1v/wJmkPgP/id7yL6c8amaZoYj8dXdHzUkkSe
      KLcmIjx8XVdgIN9H/zwpuEyxy0w3DHGFAG9N0ul06qlM/I253VQSy8iB4uLHWLDRaEifCSJ9
      pCsQ5WM563g8xu7uriQh9f50qk0mE1GiSyaTovsTDAZxenoqcQBdJ7plFFVotVrIZDISgAcC
      gRdHgYD1YIpEIpjNZvhXf/0XYA/HSP88YzibzUTcSk8u6QkndUtlFpEX7oU1UwAVeLISMd+g
      GhNs3CW8BHdZsXUbtDy/CFPvOxXY0um0DGTGUZRIUctQidQxcUUMn5+jzhNf3+SqhUIh3Llz
      B/1+X2rCLctCu93GvXv3kEwmXXmoXq8Hx1mr9XH3UYvpV6vVy5kARAVOT0+RzaQRj0bQbjWR
      yeakaEatFwA2F7w87Xs2fZ6BGN0k+n/Ak6bYDOLYjIE3n5nJfD7/Qs23vy42nU6lEvDs7Eza
      xiaTSVl8OIj1AFUnN7LxCRelpwXtjDPZVyAUCmFvb0+eteoRlMtlLBYLvPvuuyJqDLilOl9a
      K3LDWNdgXl5eovnnf4gt+yeo/e3/EsXtXekGqCbNvGRH1JujDnBG9bprw1msulTEeVX3qlo+
      wvTj/xORt38LwfyO5B6Wy6UUW7zzzjtXepB9Y1dttVrh8vJSasBVwTJdBpO7vHpP+VxIMiwW
      i8+cYbcsa2PRkWrvvPOOLLydTgfD4RDJZFLO0bZfkAynWyaTQSQSweT4DXTLHeSCa1dCreHl
      zdh00TqvCHjS21VNYHGl58Ri3TFNhWgH9RPsDz/AZeNdJAu7Ine+WCykxedtZHA+i+mIjpd1
      Oh2RgPF6RnrdtX584Ik75Pf7EYvFREFDl5j0Mu7iN31W6orP9qrA2qUeDAbrfM/LCIJVI1fE
      5/Ph8ePHUo3DZspq3sDL31ZRGfVvXjkFBlF0YyiLxz7E9AVHwyEGnTqy2/uym7CKjLIbz2Oq
      m/W6W7VavfZeDAYDqY+mqe7oarVCq9Vy1V3T1MnC1Zg1GVTcIMhBVT09NqxWq8L2JR3iphSV
      fr+PH//4xyiVSlLANRqNkMlkXu4OwIvlas3ujWyqQISGZXPAektk02K11f1NZjlvAJtXcDCq
      Ow4A+Px+5HcO5WbN53Mkk8mnNnd+mt0mcpyerdWt0+lcaZwOrBeBVqvlAiRoKkmSnwOAVCol
      k2k0GknFHbB+Nt1u1/VsGMBS0nA0Grn4YcwX8TvIFmbdOMsss9ksBoOB1IH3+/2XPwHUi8/n
      89JBkAmzVCqF0WgkgajP55PkRKfTQSKRcMljbDo2f6oPgsUqVJ+gmjTdI8YQbGLxonabJsDT
      zIu3Baz96EwmI89sU1cg9ZkBEH1PVa+JixlZuKZpolAowLIs9Ho9ABDolePFcdYd6JkT4jNX
      hXfpmhEaTSQST+DwL/KmBYNBgbWWyyXS6bQ0pNNvkM/nQyaTEZYhK7zY9p43Tw16GcgSRWB9
      ADFpqsaRT8LO7i/T5fs6me6W9Ho9gS7V170QOrVgCoC4P2quhj/pKlPuxnEcF2+ILpdKleD7
      CbdyzFEZWj2H2WwmwfsXMgHUyq18Po/Ly0vUajXh9ehcGzVZxdlOLne/35dSRR7TcRzpHUzi
      FZV/WfWvogS1Wk0UgiORiLhc30yEtakBKv9P9WXHWRe38F4RW18ul0gmky46OwNUHeUzDOMK
      QsRqMNVN0icOvQP9XL0CYdUt489yuYyDgwNEIhHJNLNZxkulQujG2lBm9+bzOc7PzyVFrTaj
      9nJ1SKgLBoPSkJn+n+M40oiNLESaGhB74fmLxUKYpqpS8dfdOp2OyA5ywYrH49L2lVSGXq8n
      RELVOOCWyyXK5bJU7cViMRkLTJQShjQMQ/oC8xg6eqS7UPo46fV6V/IG6vva7bZM1mKx6OmS
      fSFOrGmargF4dnYmQXE6nUY4HJYyNq4UOlJAOI2TiEXQjUYDu7u7nvhxOOwusvGyXq+H/+aP
      /gn+v/c+eq5k3G20dDotig6tVgvZ7JpM+OjRIwkoR6PRFRUQGu8jfW1SzSkorFKcrzPDMAQo
      IcJGVij/7rVbqZ/nT8MwJN5k5Zj6N9oXjuEZhoGDgwNUKhWhRWxtbUkHer000gvWSiQSrs40
      z6u94/f70en28OPyBO1OD7/1GyOBUtXmdl9HC4fDcl/J11c7ONItYtWX+joXolAohJ2dHRiG
      gfv377sE0rwK1r0WP9u2pVpMdYtSqZQr/0BTJwqN38neAmz11el0riiFfykgtmma2NvbW7dL
      qtdRqVRw7949nJ2deb5fncm8AeR8vEjDOcMw8Ms//AHs0Z/h7sGu3CRu/1/nCUBzHAenp6dS
      iEQOPgBZfIjjqw0/dKhTd6v1lZvusD6gye/nrsSOO5tEFM7OzoSPxAlFxCqVSiEWi6HT6WB7
      exudTkcmDD2NL3wCqLAY/cfVaoVer4dMJoNarXZFz0W/WcCausyGbC9i0WgUv/qD76HVaglC
      1O/3RarjZcCjr7MNBgMRFlj37Xqihs0FIx6Po16vizqebl7PT3+dHWNUBAiA7EL8LpXqzh1B
      nXRkoNKlDgaDwlAF1oH0eDwWFLJarbqe8RcOZOs3QSWfBQIB7O/vS6d1dRVRL5bHWK1Wojn5
      vMbKo7t378rK3263pXkDs8RfR2M21wvvB548y/F4jFKphGQyKasq4C1zyc95PTO6Omwcon9G
      Ja15nYfjOMhkMkilUtjf38fe3h62t7eRSCQQiz3pRxePx1GtVkVGn+gT8CVNAPXCisUiDg4O
      EA6HpdXl3t4ebNuGz+dDt9sVSJOJC+BJu9QXoR6QS0TZbaIS29vbEnQ3Go1rk3C32dheiKa3
      olWhaCJt6XQa4/FYpMe9uFzq59V7G4lEkEwm0ev1pKWs4zjyu9ek2RQI8zWdZMmdhLXfFFjg
      pP1CYNCb2HA4xGKxEBhrMpmgXq+jWq3KRYZCISyXS5fS8O7urisI043VYPrNazabaLVamE6n
      4uuTkEWR29Vq3duX8JraTfC222q1kjJUYI2WedEbAEihOQNKQt3M7G6SuNRtMpkIxA2sx8Rk
      MkE2mxVKO7WD+D2qV0BghH/TjeNoOBxiOp0ilUqJCiDh8K+MyaVH44TY9vb2pGxNZZCy0Z5K
      efYyZnuJQ1uWhcViIZ1JiE2TTdrtdlGv1/HgwQPpHEjU6eLiAul0+sq53kar1Wqutk5MXnlZ
      IBBwuS2Erangp0oXek0CxoCWZbniP9IiqPEPrGOSwWAgE0s93mQyEW9BnwDkg7FIP5lMirIF
      vwf4klCgm5hlWZL0MgzjSvkkI3ehsXrc2NFohMvLS9GdOTo6wttvvw3TNPHmm28KUsBs5WQy
      wcnJibR9XSwWKBaL8Pv90nBNb+J3W41BJKknarZVH1xMLql/4/uTySRGo5FA3LpLxJ5fDET1
      Y4fDYYxGI6HLxONxkT8kJYLHC4VCGxtm8DVVB4h1yZTcWa1WX3wMcFOj5owKRfJiFvM5Tn/6
      j9GtXyAQCKDVankeg+Kt9PF1V4jKcXSn/H6/BMOsFz4/P5eETq/Xk/K72x4T3L9/X6gHZFjq
      g4mrPVdp/XXVtwfWrU9VoWMieHo7VFdiyjQ9Yw+eV7/fl+6U6rk9zfScw/b29rru/Nlu08sx
      Bjj6Fru1tYWzszOEQiFXdVb9/HPsnP5POG/9IlK//u+h3+8jHo+76kzJDWKqfTqdYmdnx/P7
      1W4jwWAQxWLxCh34448/Fuh2OBwiEAggm81ekQWhve6xgh74b6Ko6INdd99l0wAAG0RJREFU
      fT/w5J6wx1e9XpddRZdDoamrN5+JHuxywUqlUkKZpj+/CbTg6+okVQXV9vf3v5wJoNKRAYg8
      hW6maeLw8FBamzIAKuzdx0X37yK1u5YsicViIsVCpIhF0gx6Go2GFE3rpvr0i8UCR0dHsCwL
      e3t7WC6X+OCDDzCdTgWvJpLAhnfUpwmFQtje3hYf9XU2wzA2Qsz6oHecJzKJ6vv1CeI4DgqF
      Amzblr5qxPTVY+tJNC+UR2WNshOn+l6aV9xB1AqAKEhQ+vIrQ4FuYrPZDJeXl7ISA1dZf7zR
      pFZkMhnp4atq+KsPR7dNpXbsKaZ2G1SNgXur1cJisXhqUclXZd1uV3SSVIlI3U5PT4VaDLgH
      Fz/H+01fehPkCTwZwJRLfJpxgtCVve59LHJRJ4bX+3RrtVqyeJVKpVcnBvCyYDCI/f19FAoF
      oTyTFDccDuX/3NrYF3g4HAoj8fLyUpQHNrkpKuFKf33T4AcgbhrluTfp1H/Vxm44q9W6R66X
      zWYz9Ho9dDodNJtN0dWnqdAm3VfKJdK8Elle4gfXGQW2VGyf5uV20R3i5LRtWzB/9bu5SFJT
      iDKZr/QOoNtyuZTmFqlUCqFQCI1GQ7K35HpXq1XpGkk3aT6fI5FIeKbuX8S4+pDt+KpSKcjr
      iUajnm5hs9mUFlPE2NnQmmKyKveHLE/eY+BJmyoWIDGxlUqlbpTAVLH/TSs6mxTG43GJJ8rl
      MlKplMinUy6d/dvUZ0TJyPF4vO798DpNgE1Wq9UkAB6NRuj3+y4mY6vVktXiwYMHX0ghu+Os
      6xReVWFdVm9t8vOPjo6u1EjX63UkEgmZMLq7o2ZZbdsW/3wymch9eBZwgMptqulIVLvdFlYw
      BzYlWfx+v8CzOlHPMAxRAwcgO9grkwd4ESsWi9LDitqfjx8/RiaTwXw+lxWIuqIslQNeLnrD
      ZhGbXKqv0p4mOJVKpUR5gbW48XhcIGEvpMXn88G2bdi2jUKhIAsLO/sQ6Oh2u4LkMBFJTg7j
      KIoa6I0VVeM5qIPfcRxXM0R9cVNdX8MwpACfLtKtmADAE9iNrTb7/T5qtZpwPwC3X3qTATqd
      TiV5Rihv0+5BVQtu06/aBHia0edm4xIGzvTJycNSi1PYz03tDwBA+D2WZV1pajcYDETh2zRN
      mQjMJNfrdVcJLM8NWIMOrAFXFzB1R1I/R+Ijdwl9Er9UZbhXxQhd5vN5WJYl/BS6AACeKn+4
      WCxg2zbOzs6QSCTkRsZiMaRSKeGvqD4zOUt6uv51sUwmg+PjY6mqY98EMjbZYZOuzXK5FJeP
      WVUOsEAggHg8jlarhdVqhb29PXGX4vG48LxUzhfvoR58A08QqEAg4Hp2m9inPD/K9rOtE6nT
      rsTbF3Q/XwlLJBKYTCaoVquYTCbI5/PXDs7ZbIaLiwtZJYLBoNTDkucSCoWE+GVZFo6OjkT1
      eDKZ4M6dO6/lBPD5fCiVShiNRojFYkKJVuNDNilh4pHyIrZtS8A7Ho8xn8+RyWRQKpVE08dL
      GJm/03TVORp3HbpMvV7PJXKr06XJ9mRRT7fbvdJWl+/7SifAl+EqWJaFSqWCQqEg/BT6jCyi
      56pNdIFSGnz4fH88HpctvNFoAICQrIbDoUsb/3UzwzCkieDFxQWm06mLSGaaphSUsPUQ9Z2G
      w+EaU/+5BlOtVpPjqsoPepJMfY2qb8wDcKegEcXK5/Po9Xro9XqiGh6LxTAej13uKrCOa0iZ
      0KFVmYC3AQV6mlG9rNfruUhuLPcjf6jZbAqMeXl5iUQiIU0cgKvKBXqi6OzsDO++++5rX1rp
      OA6Ojo4EMmWTO8dZ10uwvpc4u23bCIfDAkG2Wi2XDL2Xopwe6LbbbSQSCYG4efzZbIbBYACf
      zyfMUarKBYNBkcEkxUFtfctdmTUgXi7T67lcPaOZpol8Po9gMIh4PC688729PRjGumXq2dmZ
      +IiO40gzPlW2g6Ynafi3aDSKjz/+GNVq9bUmzzHzzusajUbi/qjVcly9KV/DIJq7IOMiHYTQ
      799gMJByWep2jsdjQfXS6TQymYzs1KlUSlA/xivUngUguZ/ZbCaSL150C8dxvh4TAFjflMPD
      Qzx48EC6nIfDYTx48ECUKmiGYUirnXa7LVRc/k39CTwJ0kzTRCaTEfmW19mKxSImkwkajQby
      +TwikQguLy9diUTeg8lkIqLERMq8iHXqPSQyw8WIXggDYfYeZpCtms/nk/O4LsvPxi2k2Ovn
      DXxNXKCnWa1Wk0Gv84VYitnv90WjiBwYna3YbDZRKBSksoz8eEKIr2OF2WAwQLValVV3sVi4
      klWO40gFHQl1lUoFk8kE4XBYCpLYqJCf4epNn51qELZtu3IW1+UEgHWCz6sAR/0cm6ITbVLt
      VqNAN60hVrvJczATXWD/q2w2Kw/OaxfgBBoOh9KlsNlsyucbjQaazabQMV6XiRCLxXDnzh2h
      qdu2LZV5xOT7/b60TaIPT1kT4EmDPTVLTpRGNfXeq8iRbduIRqMuecXxeIzZbCbd33d3d11/
      VwPsaDSKSqWC7e1tue/cNW71BNg0+HUs2IuG67XyqLRcYL06UrZjPB5LZjQajYqmKSdVIBBA
      MpnEdDrF8fExDg4OXptkmd/vx/7+PtrttmS70+m08K0YqGazWc8ci2EY2N7elrwAd1LV1MDV
      Cxpl6SMHrmVZCIfDME1TtH+YS1ATc9PpVJirlGHhTjyfz2/3BNhkXokT3Y/0gjMZWKnHIZKU
      Tqfh9/vRbrflIRNT53sZKDIj+rKaWH8Z5vP5pCm5bpZlPVVomLXWwDpmKJfLrjoBPpNgMIjB
      YCCs3+VyiVQq5Sp+1+HUYDAotSCr1QoXFxdSUsnPxONxhMNhdLtddDodIfF9LSeAOrhrtRra
      7faVBtlX0IKfF1UwoHIcB7FYDIPBQLZW9eFEIhF0Oh2Mx2NMp1ORDVkulyIDr5cdfl3Msiw8
      ePAAn332mUscyzDWNGtW7LHpumrq4NfJbgDE12fPYADSB86yLASDQQEqbs0EIP/mWVmezA9Q
      OVh9EOrNZdKHWVD2GmBmWLVAICDUaMdxRHGZhSaqD9psNpHP51/OTXhNbDweS0d4lULBeg66
      lOwec10JpRf6o8cA3CEouMCBz7/digmgBqDq1nedTadTnJ2dIRKJoNFoyGqsttqhke7LTKlt
      29LGh5QB3vBoNCoBNYMyNm7Qjzkejz3dsRcx0gBexXav5E4Ba2SGsClbY/n9fiwWC2FsEj3a
      ZGqQzfvInVXtCMSeFCptgr/figkArCXY+/0+3njjjRu1O+12u1JAw1Q6V/lCoeBiPa5WK2xt
      bckKrvbD1Y2TSMW91cDZMAy0Wi1cXFwgGo1itVqhUCgIG/JFjQH3q2jqxGSjbdUdZeNCfYV3
      HAfNZhPRaFR0h1hnzhhBvXfBYBCBQACxWEyo2rrcpfCIvoTr/lIsm80iEomg2+0Kr2STEbrj
      ROEqFIvFkEwmBa0A1itFIpHwlP6j6bkD9TWvYLtWqyGRSODw8BCdTgcnJycol8sol8uo1+sv
      4W68erZcLoVhCkBQM/U+xeNxTCYTAGtqBOMuoj4q3WGxWEi3Gj4TlsqyDJYxWKfT2aj3eqsS
      YV70BC9bLpd4/PixkLzoNrAYmyKx7HDJVq9ELLwG9rOcI4ldo9EIyWTSJe5EJWOiJq8LVPo0
      0zPp7XZbfP7RaCQlmNwJZ7MZUqmU1B2ztzChzXA47GrYYRgGGo2GHI96T8vlEp1OR/I3JNlx
      wtyqCXBTcxwHx8fHmM1myGazUivAQJWDlBSHer2OeDzuklN5lgnglVPQEQyuZPP5XCRhGCgC
      EP2i2zQh2N2x0+kgn8/DcRwBEbjY9Ho9nJ2d4d69e6jX6yJiRrfV7/eL1Dqf33Q6xcHBgbBT
      KYRLajRdpl6v9/WcAIPBAB999BH29/cFj/eCQHkzP//8czx8+PCl+dZeKXuvCcHXGUiTyao/
      r02yLq+6OY6DcrmM6XQq3J7pdArbtoVazhLXQCAgeQHuyrZtIxAISMafinKBQGCjnisXmHg8
      vg6Uv44T4PLyUtoAUW1MNTWDGAqFBKV4UbRGzSnw/8ATMh1/V7Fu3XhOpGe87nkEx1lTrwlK
      ABBomJNa9fM3GV0alnBu+i4ep1qtYn9///YEwc9i5Ixns1mRUlTNMAzYto18Pi8rhUrjVRGe
      TWQt3a57n14Irg9+dTdga1Lq+LzuZhgGcrmclDtSk5U1vCoYcd39d5y13OF19Bf9e0Oh0Nd3
      Avj9fskyqjeUqwjdHZ34prtKN12B9cDZK+mmF3t7fSf/T7/3Nhh7MaRSKYGYieQZhiFq017N
      L9R7QxfJ65no93+xWKzJjl/QNb3S5vf7USqVpIROZwiqnRCfttKrk8fr/+prun+vv0/tg+V1
      HH5GPd8vwp4GI79sIwxNmBOAZNq5G5im6dL1UU29n+T/s88ZX9fdKGaav5YTgFYqlTAYDAA8
      ySY7joN0Ou2SOaTffpOVZRNE6rWKq4NcD4qvg1v5uS9C4AvAV1LSmUwmXTwrChFEo1HJ8ah9
      v1TjPSLRbTQaodlsXgsKsCDq1mSCn8dYTqcOQtYAsIsJqbtqTSkLxtWu516mr9abXCD1fZKh
      /HllVTAYFMqEaqRmfBH2VQTW4/FYaohpquAVbRP/h4kuAhrz+RyVSkVyKrq6HftR+L6obfR1
      sVwu5ypyoZHnYxiGYMmz2QzNZlP+7+X+qKYOap/P5+qBxverx2Bxd7/fFzhPH/yOs1Zmzufz
      ryzl4XkslUpJFpim75JcDNSewFw89N0wEAhIcO2VlQ8GgyiXyzBfVxmPl2VEHsgtUf1w7g6U
      aY/H4wI9chI8bRCqKz23ZXbI3NraEjju5OQEW1tbCAQCaDabyGQyLiowB8FoNEKhULh1fctY
      OUfzAgn407ZttFotxGIx5PN5iVnUZnrqzsoEGI/BZ/21d4FohUJBVCEuLy/h9/tFR4Z6OKFQ
      yNUPNx6Po91uw7IsQZW8klnqqkOyFwtlKFk+HA5FdpDKaDqaYRiGsExv2+AHnuiq6nW7+n2k
      NMpyuRQJRtZtA+tiG9YsM4HIuE6lTgBrt+ubCQBIv1tqyABP2KInJyd4++23rwxmv9+PXC4n
      vB72ElCFZPUJkUqlpKjcMNZyLCrfnVwV9jFTXZ/FYoFOp+Nq+nGb7OzsTCY2/Xy9qQlXcu7a
      1Arijk0SI+/dcDiU8sfVauUa/HRLv5aZYC+bTCa4vLwUMpyqeW8YBnq9HkKhkIuGoA9Q5g/0
      Qb0pUPaKGTZBn2wP+7q3YvKy2WyGSqXiWSSv32PygICr5Ed1wsxmM7TbbYTDYSSTSdi27ep+
      A6wD5a93AKAYi6wZiHH75A1lgwjVZBX5eRAWCoXk83wgN02WeeUJ1O/5ImHPr9qoKgE8PdGo
      D3odSaNo73w+F6Cg3W6L76/a1zYR5mWGYaBYLIoIrgq3UWCJpmL1TN4QtVElQ9S4gO/3SnKp
      27z+0Pk3UoRfFWM7qpdhw+HQlbTaFPx60R/UhWowGIgYLwCJ5QBI3wb1/tu2/c0EUM0wDOTz
      eezu7gprkPqUKm1CfTD6YGVj500dzGl6Auy6XAIACRBfFdMx++c1omyj0Qiz2Wwj38dxHGF+
      qtA9nwHjsHQ6LUzSer0uOzeFdAGILmw2m4XJbZoH+8bWK/729jam0ynOz88RiUQwGo2usEZZ
      06reN8YIFG5iQAtc7VsLeNOfVeP7byry9WXZyxordCNZD6zTMHjdvM+r1QrValXez7hBjc8M
      wxDUjhKLTKqx1mB/f39NnmOf3clkIsHFN7Y2y7JwcHCATz/9FOFwWGjL3HL1bumqsTiemeRN
      g1z/nN7SRz2XV2kCvEyjEC93OHWR4D2ge8NAllqsLJz3yscsFguRXPT7/eh2uyiVSq6d1AQg
      heHf2FWjpqdlWej3+ygWi56+OFd84Mm2zlY/qp+q2yZKBI2B3W3K+upWLBZxcnLi0knS/X7T
      NJFIJK7kQFqt1pWm2epnSWXvdDrY3d29Ukzke1mBzG02ZohZaeS1ak+nU6njTSaTG1UINgW7
      fE03x3FEdvCmprIqXwdjjoTKeXxN/an/Tkun0+h0OphOp57BMoPdw8NDT/U6Hx8UhUa/MW8z
      jDUJjplH1WazmQSFfAhqO1KvnzeZEMB6Z9HlQ55mryO9hWxQmhdapqNAwPpaM5mM1Avo99Dv
      90vzEy/z0a9Ug7VvzG0qGWsymaDdbqPb7aLf7wsFV80RcIB3u10RlPVybbxS/rTz02NMJmPp
      f/z/t3cuy2lrWRj+DcgIBDLINwhOfFzOJNU97FlP+wH6XfoVzrucBzln2j1NuSopp5zEpWDE
      RRJCgIR64FrLW0Jc7MTYgv1N4nJsjOW99mXttf7/MSRfOwtQBkcsiKPfgaQlRfVnEcq+mabJ
      fg6WZXHSIp/Pp3bPhWH4kAalU3byskDy4HNVLpfZjVzXdfanOjk5Qb/fj+WlqbOJeguSf7i0
      GY5+1sf//oXm/37H9Z9/4P3795kbzE+F1LOTzGazmDM8fU7EcRzU63XU63VomgZFUWJ+wqnb
      nzRluGQTwTrL9LZDkwJ1LtF2R2zQqFQq6Ha7bNcDPMzqk8kk1mWWxnQ6ZSOHv//jn/jufcJv
      f/tX5pQefgbxZn3Z14j/Ug0QaTwB4H4OIm2iodcoJD+RhlivLpacLvuebYIGsmVZc62S9DGp
      Dvu+j16vB03TuDDOMAy+GBOhCYVMpUnLZm9vD7V//2djv99rQkz10vOhu6o0x3qyQBUFsij7
      Q1tP0oxN/Xmr3hC9gWS99i4MfCAuU5JcSpO5auD+8Evm0lEUcf7edV1Uq9W5Z+i6LlRVZe3R
      XYe8fYkouu+OGwwG7Fjf6/X4zFosFlMHNyl6K4qCRqOx0L9grZuVTWUVNrnFomVx1e9GN5H0
      tcnvS9b0iK9NWyXaw4oWoMRwOMT5+fkv/u2yC13MJncYNKN3u11uShL1lMSxQ5k63/fZOmkR
      L3q1OBwOX6y5Y91MiW3brBE6nU7ncs3ikixuFX3fh+/77HpIzpTiz6cg2dWzVRrT6ZQlS8Rn
      sr+/z2bkdLilYsPk8191+Sjyognj5OB/jYOA9Dkdx5mzB1pUyKYoCprNJte4APd/wLTbdpl1
      i3NwcADXdeF5Hm+Foihi1xcxFbro+VerVRY1W7XCZ+/GZIPMZjOekcR+YSB95k9WipLygGEY
      sYsxYjKZzDVp7Dqk2UTy5t1ul/fyYjYn+fzpa+n/qBtsFdtZXfWLoIHpeR73CNPnl5Ua0PdR
      8VZaERtVeL59+/YZ3nm2UVUV9Xqdq0CBh2cqpjdpQhoMBtB1neuxZrMZdF1faGIiIleAJVBx
      m7gnFWdrCgLK7ojL7XA4hOu6bAJHe1Lgvpnk+/fvj6rv2TWSpRGmacK2be77NU0TP378QKfT
      wf7+Pnd9kSfAOoMfkCvAUijLQGoMRHIloA4wkel0imazidFohHa7jVqtxgfeTqeDUqnENeqS
      eejZ0LZS13VYlhWbTCixUC6X+WPHcXB6err2z5EBsARqcRQ1RMVVgAIhrTyaUqXkGi92l5VK
      JVxeXsq9/wqOj4/Rbrf59r3RaHATzHg85vQ03VO5roujo6NHTSwyAJYg1qJTjYqqqrFOsDAM
      eVDTzaNow0mDXNd1tNtt9siVrIZ8xABwozs5dgZBgFqtBtM0cXFxAdu2cXh4+Oi+lp0NABJJ
      Eq07k4xGI7bkubu74z0mWSYBYE16St3R7EOFW8lZXu7716dUKrFIMcnB0ApMBuTkLN9oNJ7U
      M72zAUBX6cuUkMmCZzweo9VqzXnZUmue2K9L54Xb21sA4DQnCWI9trR5l1FVFblcju8EqB6I
      tJeiKEKr1eIaoaewswGw6oHRHYCqqphMJnwBE4Yh3rx5E3sdsRCLPILr9Tr7WpGiAUn2Sdbn
      7OwMtm2jWCwurOf5GXY2AFZBFZrAQ76Z6k/oc4TY9E6BpWkahsMh3r17t/k3v2U8pxqevAdI
      IYoiNtLu9/sxKT7ag4rX9GJ2KFkmLRptZI0s9RU/FRkAKZAyHIDYOUHM/yeN7cT/p49ns9mr
      ErN6LEm9/m1EBkAKs9mMD1ZiIKzbGUdZCl3XMy1nsgsXdfIMkAI1tKiqmmrKRlAQTCYTPqgB
      9xmmWq22VjGW5GWRAZACVR4GQbDSMI5ufBVFwdnZ2S8x1JZsDrkFSsGyLGiaxhdbST0fOuzS
      za/v+6xCsI2DP4qiWGHaNiFXgBQo/0+WRsk9Pyk9kJ1RFEVoNpsv9Xafnb29va09D8gASMH3
      fXQ6He4BWDSrG4bBnlWSbCK3QClQ7p6qPNMGuKIouLm5wdXV1U7ky7cVGQAJoihiWfNFB2Dx
      TJDsE5ZkC2mSl4C0PqkZZpHp3XA4xNHR0ULBJUk2kCuAAKU0r66uuPvI87zUHuB1TLIlrx8Z
      AAlEL6kwDLkMV7RNHQwG9y7jW+rYskvIv6DA3t69pHkYhtxXmpQ9t22b/aUk2UeuAAKe5yEI
      Au4uyuVyc67t+Xx+pxSbtw26wCRkAAiMx2MWs1UUhW94gbhV59evX+G67gu/W8lT8H0/JmIg
      A0Dg4OCA7Y6ok4tme6rxKRaL0DQt03X+u0xSjkYGgECn08Hnz59Z2jzpPkirwGAwkL29W4I8
      yQlMp1P2qnIcB6VSaS79ads2Wq3Ws/SnSjaPDACBfD4PwzBYsTk5yEnOXA7+7UFugQQODw/Z
      q7ZSqcRSoLPZDI7jPGuDtmTzyBVAgIwtoujenDoIAvYwcByHNWgWIY0usocMAAFVVaHrOrrd
      Li4vLzkYiFX5f9d1cXt7C03TUCgUcHp6KgPilSO3QAJRFKFQKCAIAnz69AmDwYAlzsklZhFh
      GKLdbqPX66HX68G2bVkmnQHkCiCQy+VwfHwMy7LY1UVRFEwmE5imiVqttlB3Pp/Po9lssklz
      rVbbmLmg5OnIAEhwdnYG0zRxd3eHer2OXq+HarXKEn3L9vnlclmWR2cMOUUlyOVyODk54a2Q
      YRgYj8dcJ7StzeG7igyAFM7Pz1GtVuF5Hr58+cLlz9VqFaZpYjgcvsj7iqII19fXuLm5iXll
      vWZe+zlIdoQtwPd9fPv2DZZlsWFbEASoVCoxIzbDMDa61w/DENfX19A0LRNKFKPR6FUrSsgA
      WEIURfB9Hx8/foTneWzFUy6XcXFxAVVVoarqxlOdZNkkexJ+HhkAa0A+Yf1+H+12Gx8+fJAZ
      ni1BBsAjoGaKrCjAkbqFZDFyGnsE5AaThcEfBAH3M0sWIwNgSykUCigWi1zZKkmnsEz+W5J9
      xuNxZlKmL8H/AcywXf0FL4bdAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sport with most medals' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Teams with medals' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
